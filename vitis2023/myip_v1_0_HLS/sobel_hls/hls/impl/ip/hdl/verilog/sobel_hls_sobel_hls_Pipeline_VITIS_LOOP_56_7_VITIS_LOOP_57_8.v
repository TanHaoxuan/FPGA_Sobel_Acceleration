// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_56_7_VITIS_LOOP_57_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_AXIS_TREADY,
        output_r_address0,
        output_r_ce0,
        output_r_q0,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TKEEP,
        M_AXIS_TSTRB,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   M_AXIS_TREADY;
output  [11:0] output_r_address0;
output   output_r_ce0;
input  [7:0] output_r_q0;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
output  [3:0] M_AXIS_TKEEP;
output  [3:0] M_AXIS_TSTRB;
output  [0:0] M_AXIS_TLAST;

reg ap_idle;
reg output_r_ce0;
reg M_AXIS_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln56_fu_123_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    M_AXIS_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] select_ln56_fu_153_p3;
reg   [5:0] select_ln56_reg_256;
reg   [5:0] select_ln56_reg_256_pp0_iter1_reg;
wire   [0:0] cmp103_fu_173_p2;
reg   [0:0] cmp103_reg_267;
reg   [0:0] cmp103_reg_267_pp0_iter1_reg;
wire   [0:0] write_output_last_fu_208_p2;
reg   [0:0] write_output_last_reg_277;
reg   [0:0] write_output_last_reg_277_pp0_iter3_reg;
wire   [63:0] zext_ln58_2_fu_213_p1;
reg   [5:0] j_fu_62;
wire   [5:0] add_ln57_fu_179_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_66;
wire   [5:0] select_ln56_1_fu_161_p3;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [11:0] indvar_flatten13_fu_70;
wire   [11:0] add_ln56_1_fu_129_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten13_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln57_fu_147_p2;
wire   [5:0] add_ln56_fu_141_p2;
wire   [0:0] icmp_ln59_fu_203_p2;
wire   [11:0] grp_fu_222_p3;
wire   [5:0] grp_fu_222_p0;
wire   [5:0] grp_fu_222_p1;
wire   [5:0] grp_fu_222_p2;
reg    grp_fu_222_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [11:0] grp_fu_222_p00;
wire   [11:0] grp_fu_222_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_62 = 6'd0;
#0 i_fu_66 = 6'd0;
#0 indvar_flatten13_fu_70 = 12'd0;
#0 ap_done_reg = 1'b0;
end

sobel_hls_mac_muladd_6ns_6ns_6ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_6ns_6ns_12_4_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p0),
    .din1(grp_fu_222_p1),
    .din2(grp_fu_222_p2),
    .ce(grp_fu_222_ce),
    .dout(grp_fu_222_p3)
);

sobel_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln56_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln56_1_fu_161_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln56_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_70 <= add_ln56_1_fu_129_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_70 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln56_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_62 <= add_ln57_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        cmp103_reg_267 <= cmp103_fu_173_p2;
        cmp103_reg_267_pp0_iter1_reg <= cmp103_reg_267;
        select_ln56_reg_256 <= select_ln56_fu_153_p3;
        select_ln56_reg_256_pp0_iter1_reg <= select_ln56_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        write_output_last_reg_277 <= write_output_last_fu_208_p2;
        write_output_last_reg_277_pp0_iter3_reg <= write_output_last_reg_277;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        M_AXIS_TVALID = 1'b1;
    end else begin
        M_AXIS_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_123_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_222_ce = 1'b1;
    end else begin
        grp_fu_222_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = output_r_q0;

assign M_AXIS_TKEEP = 'bx;

assign M_AXIS_TLAST = write_output_last_reg_277_pp0_iter3_reg;

assign M_AXIS_TSTRB = 'bx;

assign add_ln56_1_fu_129_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 12'd1);

assign add_ln56_fu_141_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln57_fu_179_p2 = (select_ln56_fu_153_p3 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b0 == M_AXIS_TREADY) | (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b0 == M_AXIS_TREADY) | (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (1'b0 == M_AXIS_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cmp103_fu_173_p2 = ((select_ln56_1_fu_161_p3 == 6'd49) ? 1'b1 : 1'b0);

assign grp_fu_222_p0 = grp_fu_222_p00;

assign grp_fu_222_p00 = select_ln56_1_fu_161_p3;

assign grp_fu_222_p1 = 12'd50;

assign grp_fu_222_p2 = grp_fu_222_p20;

assign grp_fu_222_p20 = select_ln56_reg_256_pp0_iter1_reg;

assign icmp_ln56_fu_123_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 12'd2500) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_147_p2 = ((ap_sig_allocacmp_j_load == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_203_p2 = ((select_ln56_reg_256_pp0_iter1_reg == 6'd49) ? 1'b1 : 1'b0);

assign output_r_address0 = zext_ln58_2_fu_213_p1;

assign select_ln56_1_fu_161_p3 = ((icmp_ln57_fu_147_p2[0:0] == 1'b1) ? add_ln56_fu_141_p2 : ap_sig_allocacmp_i_load);

assign select_ln56_fu_153_p3 = ((icmp_ln57_fu_147_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign write_output_last_fu_208_p2 = (icmp_ln59_fu_203_p2 & cmp103_reg_267_pp0_iter1_reg);

assign zext_ln58_2_fu_213_p1 = grp_fu_222_p3;

endmodule //sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_56_7_VITIS_LOOP_57_8
