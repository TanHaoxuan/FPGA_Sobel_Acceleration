// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        S_AXIS_TVALID,
        frame_address0,
        frame_ce0,
        frame_we0,
        frame_d0,
        frame_1_address0,
        frame_1_ce0,
        frame_1_we0,
        frame_1_d0,
        frame_2_address0,
        frame_2_ce0,
        frame_2_we0,
        frame_2_d0,
        frame_3_address0,
        frame_3_ce0,
        frame_3_we0,
        frame_3_d0,
        frame_4_address0,
        frame_4_ce0,
        frame_4_we0,
        frame_4_d0,
        frame_5_address0,
        frame_5_ce0,
        frame_5_we0,
        frame_5_d0,
        frame_6_address0,
        frame_6_ce0,
        frame_6_we0,
        frame_6_d0,
        frame_7_address0,
        frame_7_ce0,
        frame_7_we0,
        frame_7_d0,
        frame_8_address0,
        frame_8_ce0,
        frame_8_we0,
        frame_8_d0,
        S_AXIS_TDATA,
        S_AXIS_TREADY,
        S_AXIS_TKEEP,
        S_AXIS_TSTRB,
        S_AXIS_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   S_AXIS_TVALID;
output  [8:0] frame_address0;
output   frame_ce0;
output   frame_we0;
output  [7:0] frame_d0;
output  [8:0] frame_1_address0;
output   frame_1_ce0;
output   frame_1_we0;
output  [7:0] frame_1_d0;
output  [8:0] frame_2_address0;
output   frame_2_ce0;
output   frame_2_we0;
output  [7:0] frame_2_d0;
output  [8:0] frame_3_address0;
output   frame_3_ce0;
output   frame_3_we0;
output  [7:0] frame_3_d0;
output  [8:0] frame_4_address0;
output   frame_4_ce0;
output   frame_4_we0;
output  [7:0] frame_4_d0;
output  [8:0] frame_5_address0;
output   frame_5_ce0;
output   frame_5_we0;
output  [7:0] frame_5_d0;
output  [8:0] frame_6_address0;
output   frame_6_ce0;
output   frame_6_we0;
output  [7:0] frame_6_d0;
output  [8:0] frame_7_address0;
output   frame_7_ce0;
output   frame_7_we0;
output  [7:0] frame_7_d0;
output  [8:0] frame_8_address0;
output   frame_8_ce0;
output   frame_8_we0;
output  [7:0] frame_8_d0;
input  [31:0] S_AXIS_TDATA;
output   S_AXIS_TREADY;
input  [3:0] S_AXIS_TKEEP;
input  [3:0] S_AXIS_TSTRB;
input  [0:0] S_AXIS_TLAST;

reg ap_idle;
reg frame_ce0;
reg frame_we0;
reg frame_1_ce0;
reg frame_1_we0;
reg frame_2_ce0;
reg frame_2_we0;
reg frame_3_ce0;
reg frame_3_we0;
reg frame_4_ce0;
reg frame_4_we0;
reg frame_5_ce0;
reg frame_5_we0;
reg frame_6_ce0;
reg frame_6_we0;
reg frame_7_ce0;
reg frame_7_we0;
reg frame_8_ce0;
reg frame_8_we0;
reg S_AXIS_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln32_fu_249_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    S_AXIS_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] select_ln32_fu_279_p3;
wire   [5:0] select_ln32_1_fu_287_p3;
wire   [8:0] add_ln35_1_fu_363_p2;
reg   [8:0] add_ln35_1_reg_459;
reg   [8:0] add_ln35_1_reg_459_pp0_iter1_reg;
reg   [8:0] add_ln35_1_reg_459_pp0_iter2_reg;
reg   [8:0] add_ln35_1_reg_459_pp0_iter3_reg;
reg   [8:0] add_ln35_1_reg_459_pp0_iter4_reg;
reg   [8:0] add_ln35_1_reg_459_pp0_iter5_reg;
reg   [8:0] add_ln35_1_reg_459_pp0_iter6_reg;
reg   [8:0] add_ln35_1_reg_459_pp0_iter7_reg;
reg   [8:0] add_ln35_1_reg_459_pp0_iter8_reg;
wire   [7:0] trunc_ln35_fu_379_p1;
reg   [7:0] trunc_ln35_reg_464;
reg   [7:0] trunc_ln35_reg_464_pp0_iter1_reg;
reg   [7:0] trunc_ln35_reg_464_pp0_iter2_reg;
reg   [7:0] trunc_ln35_reg_464_pp0_iter3_reg;
reg   [7:0] trunc_ln35_reg_464_pp0_iter4_reg;
reg   [7:0] trunc_ln35_reg_464_pp0_iter5_reg;
reg   [7:0] trunc_ln35_reg_464_pp0_iter6_reg;
reg   [7:0] trunc_ln35_reg_464_pp0_iter7_reg;
reg   [7:0] trunc_ln35_reg_464_pp0_iter8_reg;
wire   [63:0] zext_ln35_2_fu_408_p1;
reg   [5:0] j_fu_90;
wire   [5:0] add_ln33_fu_383_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_94;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [11:0] indvar_flatten_fu_98;
wire   [11:0] add_ln32_1_fu_255_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [1:0] trunc_ln32_fu_404_p1;
wire   [1:0] trunc_ln33_fu_420_p1;
wire   [0:0] icmp_ln33_fu_273_p2;
wire   [5:0] add_ln32_fu_267_p2;
wire   [5:0] mul_ln32_fu_299_p0;
wire   [7:0] mul_ln32_fu_299_p1;
wire   [12:0] mul_ln32_fu_299_p2;
wire   [4:0] tmp_fu_305_p4;
wire   [8:0] tmp_33_fu_319_p3;
wire   [8:0] zext_ln35_fu_315_p1;
wire   [2:0] grp_fu_333_p1;
wire   [5:0] mul_ln33_fu_343_p0;
wire   [7:0] mul_ln33_fu_343_p1;
wire   [12:0] mul_ln33_fu_343_p2;
wire   [4:0] tmp_46_fu_349_p4;
wire   [8:0] add_ln35_fu_327_p2;
wire   [8:0] zext_ln35_1_fu_359_p1;
wire   [2:0] grp_fu_369_p1;
wire   [1:0] grp_fu_333_p2;
wire   [1:0] grp_fu_369_p2;
reg    grp_fu_333_ce;
reg    grp_fu_369_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] mul_ln32_fu_299_p00;
wire   [12:0] mul_ln33_fu_343_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 j_fu_90 = 6'd0;
#0 i_fu_94 = 6'd0;
#0 indvar_flatten_fu_98 = 12'd0;
#0 ap_done_reg = 1'b0;
end

sobel_hls_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U2(
    .din0(mul_ln32_fu_299_p0),
    .din1(mul_ln32_fu_299_p1),
    .dout(mul_ln32_fu_299_p2)
);

sobel_hls_urem_6ns_3ns_2_10_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_6ns_3ns_2_10_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln32_1_fu_287_p3),
    .din1(grp_fu_333_p1),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p2)
);

sobel_hls_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U4(
    .din0(mul_ln33_fu_343_p0),
    .din1(mul_ln33_fu_343_p1),
    .dout(mul_ln33_fu_343_p2)
);

sobel_hls_urem_6ns_3ns_2_10_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_6ns_3ns_2_10_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln32_fu_279_p3),
    .din1(grp_fu_369_p1),
    .ce(grp_fu_369_ce),
    .dout(grp_fu_369_p2)
);

sobel_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_249_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_94 <= select_ln32_1_fu_287_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_94 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_249_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            indvar_flatten_fu_98 <= add_ln32_1_fu_255_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_249_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            j_fu_90 <= add_ln33_fu_383_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_90 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_1_reg_459 <= add_ln35_1_fu_363_p2;
        add_ln35_1_reg_459_pp0_iter1_reg <= add_ln35_1_reg_459;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        trunc_ln35_reg_464 <= trunc_ln35_fu_379_p1;
        trunc_ln35_reg_464_pp0_iter1_reg <= trunc_ln35_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln35_1_reg_459_pp0_iter2_reg <= add_ln35_1_reg_459_pp0_iter1_reg;
        add_ln35_1_reg_459_pp0_iter3_reg <= add_ln35_1_reg_459_pp0_iter2_reg;
        add_ln35_1_reg_459_pp0_iter4_reg <= add_ln35_1_reg_459_pp0_iter3_reg;
        add_ln35_1_reg_459_pp0_iter5_reg <= add_ln35_1_reg_459_pp0_iter4_reg;
        add_ln35_1_reg_459_pp0_iter6_reg <= add_ln35_1_reg_459_pp0_iter5_reg;
        add_ln35_1_reg_459_pp0_iter7_reg <= add_ln35_1_reg_459_pp0_iter6_reg;
        add_ln35_1_reg_459_pp0_iter8_reg <= add_ln35_1_reg_459_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        trunc_ln35_reg_464_pp0_iter2_reg <= trunc_ln35_reg_464_pp0_iter1_reg;
        trunc_ln35_reg_464_pp0_iter3_reg <= trunc_ln35_reg_464_pp0_iter2_reg;
        trunc_ln35_reg_464_pp0_iter4_reg <= trunc_ln35_reg_464_pp0_iter3_reg;
        trunc_ln35_reg_464_pp0_iter5_reg <= trunc_ln35_reg_464_pp0_iter4_reg;
        trunc_ln35_reg_464_pp0_iter6_reg <= trunc_ln35_reg_464_pp0_iter5_reg;
        trunc_ln35_reg_464_pp0_iter7_reg <= trunc_ln35_reg_464_pp0_iter6_reg;
        trunc_ln35_reg_464_pp0_iter8_reg <= trunc_ln35_reg_464_pp0_iter7_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln32_fu_249_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_fu_249_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_fu_249_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_1_ce0 = 1'b1;
    end else begin
        frame_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln33_fu_420_p1 == 2'd1) & (trunc_ln32_fu_404_p1 == 2'd0))) begin
        frame_1_we0 = 1'b1;
    end else begin
        frame_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_2_ce0 = 1'b1;
    end else begin
        frame_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln33_fu_420_p1 == 2'd0) & ~(trunc_ln33_fu_420_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln32_fu_404_p1 == 2'd0))) begin
        frame_2_we0 = 1'b1;
    end else begin
        frame_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_3_ce0 = 1'b1;
    end else begin
        frame_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln33_fu_420_p1 == 2'd0) & (trunc_ln32_fu_404_p1 == 2'd1))) begin
        frame_3_we0 = 1'b1;
    end else begin
        frame_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_4_ce0 = 1'b1;
    end else begin
        frame_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln33_fu_420_p1 == 2'd1) & (trunc_ln32_fu_404_p1 == 2'd1))) begin
        frame_4_we0 = 1'b1;
    end else begin
        frame_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_5_ce0 = 1'b1;
    end else begin
        frame_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln33_fu_420_p1 == 2'd0) & ~(trunc_ln33_fu_420_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln32_fu_404_p1 == 2'd1))) begin
        frame_5_we0 = 1'b1;
    end else begin
        frame_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_6_ce0 = 1'b1;
    end else begin
        frame_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln32_fu_404_p1 == 2'd0) & ~(trunc_ln32_fu_404_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln33_fu_420_p1 == 2'd0))) begin
        frame_6_we0 = 1'b1;
    end else begin
        frame_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_7_ce0 = 1'b1;
    end else begin
        frame_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln32_fu_404_p1 == 2'd0) & ~(trunc_ln32_fu_404_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln33_fu_420_p1 == 2'd1))) begin
        frame_7_we0 = 1'b1;
    end else begin
        frame_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_8_ce0 = 1'b1;
    end else begin
        frame_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln32_fu_404_p1 == 2'd0) & ~(trunc_ln33_fu_420_p1 == 2'd0) & ~(trunc_ln33_fu_420_p1 == 2'd1) & ~(trunc_ln32_fu_404_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_8_we0 = 1'b1;
    end else begin
        frame_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        frame_ce0 = 1'b1;
    end else begin
        frame_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln33_fu_420_p1 == 2'd0) & (trunc_ln32_fu_404_p1 == 2'd0))) begin
        frame_we0 = 1'b1;
    end else begin
        frame_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_369_ce = 1'b1;
    end else begin
        grp_fu_369_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_1_fu_255_p2 = (ap_sig_allocacmp_indvar_flatten_load + 12'd1);

assign add_ln32_fu_267_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln33_fu_383_p2 = (select_ln32_fu_279_p3 + 6'd1);

assign add_ln35_1_fu_363_p2 = (add_ln35_fu_327_p2 + zext_ln35_1_fu_359_p1);

assign add_ln35_fu_327_p2 = (tmp_33_fu_319_p3 + zext_ln35_fu_315_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((icmp_ln32_fu_249_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign frame_1_address0 = zext_ln35_2_fu_408_p1;

assign frame_1_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_2_address0 = zext_ln35_2_fu_408_p1;

assign frame_2_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_3_address0 = zext_ln35_2_fu_408_p1;

assign frame_3_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_4_address0 = zext_ln35_2_fu_408_p1;

assign frame_4_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_5_address0 = zext_ln35_2_fu_408_p1;

assign frame_5_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_6_address0 = zext_ln35_2_fu_408_p1;

assign frame_6_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_7_address0 = zext_ln35_2_fu_408_p1;

assign frame_7_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_8_address0 = zext_ln35_2_fu_408_p1;

assign frame_8_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign frame_address0 = zext_ln35_2_fu_408_p1;

assign frame_d0 = trunc_ln35_reg_464_pp0_iter8_reg;

assign grp_fu_333_p1 = 6'd3;

assign grp_fu_369_p1 = 6'd3;

assign icmp_ln32_fu_249_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 12'd2500) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_273_p2 = ((ap_sig_allocacmp_j_load == 6'd50) ? 1'b1 : 1'b0);

assign mul_ln32_fu_299_p0 = mul_ln32_fu_299_p00;

assign mul_ln32_fu_299_p00 = select_ln32_1_fu_287_p3;

assign mul_ln32_fu_299_p1 = 13'd86;

assign mul_ln33_fu_343_p0 = mul_ln33_fu_343_p00;

assign mul_ln33_fu_343_p00 = select_ln32_fu_279_p3;

assign mul_ln33_fu_343_p1 = 13'd86;

assign select_ln32_1_fu_287_p3 = ((icmp_ln33_fu_273_p2[0:0] == 1'b1) ? add_ln32_fu_267_p2 : ap_sig_allocacmp_i_load);

assign select_ln32_fu_279_p3 = ((icmp_ln33_fu_273_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign tmp_33_fu_319_p3 = {{tmp_fu_305_p4}, {4'd0}};

assign tmp_46_fu_349_p4 = {{mul_ln33_fu_343_p2[12:8]}};

assign tmp_fu_305_p4 = {{mul_ln32_fu_299_p2[12:8]}};

assign trunc_ln32_fu_404_p1 = grp_fu_333_p2[1:0];

assign trunc_ln33_fu_420_p1 = grp_fu_369_p2[1:0];

assign trunc_ln35_fu_379_p1 = S_AXIS_TDATA[7:0];

assign zext_ln35_1_fu_359_p1 = tmp_46_fu_349_p4;

assign zext_ln35_2_fu_408_p1 = add_ln35_1_reg_459_pp0_iter8_reg;

assign zext_ln35_fu_315_p1 = tmp_fu_305_p4;

endmodule //sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2
