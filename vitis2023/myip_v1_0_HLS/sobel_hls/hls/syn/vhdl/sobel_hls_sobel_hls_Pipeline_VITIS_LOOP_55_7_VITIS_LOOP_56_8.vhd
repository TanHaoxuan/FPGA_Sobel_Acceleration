-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_55_7_VITIS_LOOP_56_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_4_ce0 : OUT STD_LOGIC;
    output_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_5_ce0 : OUT STD_LOGIC;
    output_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_6_ce0 : OUT STD_LOGIC;
    output_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_7_ce0 : OUT STD_LOGIC;
    output_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_8_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_8_ce0 : OUT STD_LOGIC;
    output_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_9_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_9_ce0 : OUT STD_LOGIC;
    output_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_10_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_10_ce0 : OUT STD_LOGIC;
    output_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_11_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_11_ce0 : OUT STD_LOGIC;
    output_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_12_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_12_ce0 : OUT STD_LOGIC;
    output_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_13_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_13_ce0 : OUT STD_LOGIC;
    output_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_14_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_14_ce0 : OUT STD_LOGIC;
    output_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_15_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_15_ce0 : OUT STD_LOGIC;
    output_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    M_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    M_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_55_7_VITIS_LOOP_56_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln55_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln7_reg_701 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_last_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_last_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln57_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_134 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln56_fu_500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_138 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln55_1_fu_428_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten13_fu_142 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln55_1_fu_396_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln56_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_408_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln55_fu_420_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_fu_446_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_450_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal cmp94_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_data_fu_521_p33 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_output_data_fu_521_p35 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal write_output_data_fu_521_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_data_fu_521_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sobel_hls_sparsemux_33_4_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_33_4_8_1_1_U267 : component sobel_hls_sparsemux_33_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 8,
        CASE1 => "0001",
        din1_WIDTH => 8,
        CASE2 => "0010",
        din2_WIDTH => 8,
        CASE3 => "0011",
        din3_WIDTH => 8,
        CASE4 => "0100",
        din4_WIDTH => 8,
        CASE5 => "0101",
        din5_WIDTH => 8,
        CASE6 => "0110",
        din6_WIDTH => 8,
        CASE7 => "0111",
        din7_WIDTH => 8,
        CASE8 => "1000",
        din8_WIDTH => 8,
        CASE9 => "1001",
        din9_WIDTH => 8,
        CASE10 => "1010",
        din10_WIDTH => 8,
        CASE11 => "1011",
        din11_WIDTH => 8,
        CASE12 => "1100",
        din12_WIDTH => 8,
        CASE13 => "1101",
        din13_WIDTH => 8,
        CASE14 => "1110",
        din14_WIDTH => 8,
        CASE15 => "1111",
        din15_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => output_r_q0,
        din1 => output_1_q0,
        din2 => output_2_q0,
        din3 => output_3_q0,
        din4 => output_4_q0,
        din5 => output_5_q0,
        din6 => output_6_q0,
        din7 => output_7_q0,
        din8 => output_8_q0,
        din9 => output_9_q0,
        din10 => output_10_q0,
        din11 => output_11_q0,
        din12 => output_12_q0,
        din13 => output_13_q0,
        din14 => output_14_q0,
        din15 => output_15_q0,
        def => write_output_data_fu_521_p33,
        sel => trunc_ln7_reg_701,
        dout => write_output_data_fu_521_p35);

    flow_control_loop_pipe_sequential_init_U : component sobel_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_138 <= ap_const_lv9_0;
                elsif (((icmp_ln55_fu_390_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_138 <= select_ln55_1_fu_428_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_142 <= ap_const_lv17_0;
                elsif (((icmp_ln55_fu_390_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_142 <= add_ln55_1_fu_396_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_134 <= ap_const_lv9_0;
                elsif (((icmp_ln55_fu_390_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_134 <= add_ln56_fu_500_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln7_reg_701 <= select_ln55_fu_420_p3(7 downto 4);
                write_output_last_reg_706 <= write_output_last_fu_494_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    M_AXIS_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_output_data_fu_521_p35),32));

    M_AXIS_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, M_AXIS_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_TREADY;
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TKEEP <= "XXXX";
    M_AXIS_TLAST <= write_output_last_reg_706;
    M_AXIS_TSTRB <= "XXXX";

    M_AXIS_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            M_AXIS_TVALID <= ap_const_logic_1;
        else 
            M_AXIS_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    add_ln55_1_fu_396_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_142) + unsigned(ap_const_lv17_1));
    add_ln55_fu_408_p2 <= std_logic_vector(unsigned(i_fu_138) + unsigned(ap_const_lv9_1));
    add_ln56_fu_500_p2 <= std_logic_vector(unsigned(select_ln55_fu_420_p3) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, M_AXIS_TREADY, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_logic_0 = M_AXIS_TREADY) or (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, M_AXIS_TREADY, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_logic_0 = M_AXIS_TREADY) or (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(M_AXIS_TREADY)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (ap_const_logic_0 = M_AXIS_TREADY);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln55_fu_390_p2)
    begin
        if (((icmp_ln55_fu_390_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp94_fu_440_p2 <= "1" when (select_ln55_1_fu_428_p3 = ap_const_lv9_FF) else "0";
    empty_fu_436_p1 <= select_ln55_1_fu_428_p3(8 - 1 downto 0);
    icmp_ln55_fu_390_p2 <= "1" when (indvar_flatten13_fu_142 = ap_const_lv17_10000) else "0";
    icmp_ln56_fu_414_p2 <= "1" when (j_fu_134 = ap_const_lv9_100) else "0";
    icmp_ln58_fu_488_p2 <= "1" when (select_ln55_fu_420_p3 = ap_const_lv9_FF) else "0";
    output_10_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_10_ce0 <= ap_const_logic_1;
        else 
            output_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_11_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_11_ce0 <= ap_const_logic_1;
        else 
            output_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_12_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_12_ce0 <= ap_const_logic_1;
        else 
            output_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_13_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_13_ce0 <= ap_const_logic_1;
        else 
            output_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_14_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_14_ce0 <= ap_const_logic_1;
        else 
            output_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_15_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_15_ce0 <= ap_const_logic_1;
        else 
            output_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_4_ce0 <= ap_const_logic_1;
        else 
            output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_5_ce0 <= ap_const_logic_1;
        else 
            output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_6_ce0 <= ap_const_logic_1;
        else 
            output_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_7_ce0 <= ap_const_logic_1;
        else 
            output_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_8_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_8_ce0 <= ap_const_logic_1;
        else 
            output_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_9_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_9_ce0 <= ap_const_logic_1;
        else 
            output_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= zext_ln57_fu_458_p1(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln55_1_fu_428_p3 <= 
        add_ln55_fu_408_p2 when (icmp_ln56_fu_414_p2(0) = '1') else 
        i_fu_138;
    select_ln55_fu_420_p3 <= 
        ap_const_lv9_0 when (icmp_ln56_fu_414_p2(0) = '1') else 
        j_fu_134;
    tmp_s_fu_450_p3 <= (empty_fu_436_p1 & trunc_ln56_fu_446_p1);
    trunc_ln56_fu_446_p1 <= select_ln55_fu_420_p3(4 - 1 downto 0);
    write_output_data_fu_521_p33 <= "XXXXXXXX";
    write_output_last_fu_494_p2 <= (icmp_ln58_fu_488_p2 and cmp94_fu_440_p2);
    zext_ln57_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_450_p3),64));
end behav;
