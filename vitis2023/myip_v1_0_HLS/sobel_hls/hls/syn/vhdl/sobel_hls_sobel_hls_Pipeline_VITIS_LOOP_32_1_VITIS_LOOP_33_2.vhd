-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S_AXIS_TVALID : IN STD_LOGIC;
    frame_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_ce0 : OUT STD_LOGIC;
    frame_we0 : OUT STD_LOGIC;
    frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_1_ce0 : OUT STD_LOGIC;
    frame_1_we0 : OUT STD_LOGIC;
    frame_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_2_ce0 : OUT STD_LOGIC;
    frame_2_we0 : OUT STD_LOGIC;
    frame_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_3_ce0 : OUT STD_LOGIC;
    frame_3_we0 : OUT STD_LOGIC;
    frame_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_4_ce0 : OUT STD_LOGIC;
    frame_4_we0 : OUT STD_LOGIC;
    frame_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_5_ce0 : OUT STD_LOGIC;
    frame_5_we0 : OUT STD_LOGIC;
    frame_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_6_ce0 : OUT STD_LOGIC;
    frame_6_we0 : OUT STD_LOGIC;
    frame_6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_7_ce0 : OUT STD_LOGIC;
    frame_7_we0 : OUT STD_LOGIC;
    frame_7_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    frame_8_ce0 : OUT STD_LOGIC;
    frame_8_we0 : OUT STD_LOGIC;
    frame_8_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    S_AXIS_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    S_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_9C4 : STD_LOGIC_VECTOR (11 downto 0) := "100111000100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln32_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln32_fu_279_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln32_1_fu_287_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln35_1_fu_363_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_1_reg_459_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln35_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_464_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_2_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_90 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln33_fu_383_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_94 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln32_1_fu_255_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln32_fu_404_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln33_fu_420_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln33_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_267_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln32_fu_299_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln32_fu_299_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_fu_299_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_305_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_319_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_fu_315_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln33_fu_343_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln33_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_fu_343_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_46_fu_349_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_fu_327_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_1_fu_359_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_333_ce : STD_LOGIC;
    signal grp_fu_369_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln32_fu_299_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln33_fu_343_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sobel_hls_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component sobel_hls_urem_6ns_3ns_2_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component sobel_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_6ns_8ns_13_1_1_U2 : component sobel_hls_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln32_fu_299_p0,
        din1 => mul_ln32_fu_299_p1,
        dout => mul_ln32_fu_299_p2);

    urem_6ns_3ns_2_10_1_U3 : component sobel_hls_urem_6ns_3ns_2_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln32_1_fu_287_p3,
        din1 => grp_fu_333_p1,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    mul_6ns_8ns_13_1_1_U4 : component sobel_hls_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln33_fu_343_p0,
        din1 => mul_ln33_fu_343_p1,
        dout => mul_ln33_fu_343_p2);

    urem_6ns_3ns_2_10_1_U5 : component sobel_hls_urem_6ns_3ns_2_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln32_fu_279_p3,
        din1 => grp_fu_369_p1,
        ce => grp_fu_369_ce,
        dout => grp_fu_369_p2);

    flow_control_loop_pipe_sequential_init_U : component sobel_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_249_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    i_fu_94 <= select_ln32_1_fu_287_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_94 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_249_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    indvar_flatten_fu_98 <= add_ln32_1_fu_255_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_249_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    j_fu_90 <= add_ln33_fu_383_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_90 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_1_reg_459 <= add_ln35_1_fu_363_p2;
                add_ln35_1_reg_459_pp0_iter1_reg <= add_ln35_1_reg_459;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                trunc_ln35_reg_464 <= trunc_ln35_fu_379_p1;
                trunc_ln35_reg_464_pp0_iter1_reg <= trunc_ln35_reg_464;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln35_1_reg_459_pp0_iter2_reg <= add_ln35_1_reg_459_pp0_iter1_reg;
                add_ln35_1_reg_459_pp0_iter3_reg <= add_ln35_1_reg_459_pp0_iter2_reg;
                add_ln35_1_reg_459_pp0_iter4_reg <= add_ln35_1_reg_459_pp0_iter3_reg;
                add_ln35_1_reg_459_pp0_iter5_reg <= add_ln35_1_reg_459_pp0_iter4_reg;
                add_ln35_1_reg_459_pp0_iter6_reg <= add_ln35_1_reg_459_pp0_iter5_reg;
                add_ln35_1_reg_459_pp0_iter7_reg <= add_ln35_1_reg_459_pp0_iter6_reg;
                add_ln35_1_reg_459_pp0_iter8_reg <= add_ln35_1_reg_459_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                trunc_ln35_reg_464_pp0_iter2_reg <= trunc_ln35_reg_464_pp0_iter1_reg;
                trunc_ln35_reg_464_pp0_iter3_reg <= trunc_ln35_reg_464_pp0_iter2_reg;
                trunc_ln35_reg_464_pp0_iter4_reg <= trunc_ln35_reg_464_pp0_iter3_reg;
                trunc_ln35_reg_464_pp0_iter5_reg <= trunc_ln35_reg_464_pp0_iter4_reg;
                trunc_ln35_reg_464_pp0_iter6_reg <= trunc_ln35_reg_464_pp0_iter5_reg;
                trunc_ln35_reg_464_pp0_iter7_reg <= trunc_ln35_reg_464_pp0_iter6_reg;
                trunc_ln35_reg_464_pp0_iter8_reg <= trunc_ln35_reg_464_pp0_iter7_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    S_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, S_AXIS_TVALID, icmp_ln32_fu_249_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln32_fu_249_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_TVALID;
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_AXIS_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln32_fu_249_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_fu_249_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_AXIS_TREADY <= ap_const_logic_1;
        else 
            S_AXIS_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln32_1_fu_255_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln32_fu_267_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv6_1));
    add_ln33_fu_383_p2 <= std_logic_vector(unsigned(select_ln32_fu_279_p3) + unsigned(ap_const_lv6_1));
    add_ln35_1_fu_363_p2 <= std_logic_vector(unsigned(add_ln35_fu_327_p2) + unsigned(zext_ln35_1_fu_359_p1));
    add_ln35_fu_327_p2 <= std_logic_vector(unsigned(tmp_33_fu_319_p3) + unsigned(zext_ln35_fu_315_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(S_AXIS_TVALID, icmp_ln32_fu_249_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln32_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln32_fu_249_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln32_fu_249_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_90;
        end if; 
    end process;

    frame_1_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_1_ce0 <= ap_const_logic_1;
        else 
            frame_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_1_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_1_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln33_fu_420_p1 = ap_const_lv2_1) and (trunc_ln32_fu_404_p1 = ap_const_lv2_0))) then 
            frame_1_we0 <= ap_const_logic_1;
        else 
            frame_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_2_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_2_ce0 <= ap_const_logic_1;
        else 
            frame_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_2_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_2_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if ((not((trunc_ln33_fu_420_p1 = ap_const_lv2_0)) and not((trunc_ln33_fu_420_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln32_fu_404_p1 = ap_const_lv2_0))) then 
            frame_2_we0 <= ap_const_logic_1;
        else 
            frame_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_3_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_3_ce0 <= ap_const_logic_1;
        else 
            frame_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_3_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_3_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln33_fu_420_p1 = ap_const_lv2_0) and (trunc_ln32_fu_404_p1 = ap_const_lv2_1))) then 
            frame_3_we0 <= ap_const_logic_1;
        else 
            frame_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_4_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_4_ce0 <= ap_const_logic_1;
        else 
            frame_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_4_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_4_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln33_fu_420_p1 = ap_const_lv2_1) and (trunc_ln32_fu_404_p1 = ap_const_lv2_1))) then 
            frame_4_we0 <= ap_const_logic_1;
        else 
            frame_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_5_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_5_ce0 <= ap_const_logic_1;
        else 
            frame_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_5_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_5_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if ((not((trunc_ln33_fu_420_p1 = ap_const_lv2_0)) and not((trunc_ln33_fu_420_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln32_fu_404_p1 = ap_const_lv2_1))) then 
            frame_5_we0 <= ap_const_logic_1;
        else 
            frame_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_6_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_6_ce0 <= ap_const_logic_1;
        else 
            frame_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_6_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_6_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if ((not((trunc_ln32_fu_404_p1 = ap_const_lv2_0)) and not((trunc_ln32_fu_404_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln33_fu_420_p1 = ap_const_lv2_0))) then 
            frame_6_we0 <= ap_const_logic_1;
        else 
            frame_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_7_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_7_ce0 <= ap_const_logic_1;
        else 
            frame_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_7_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_7_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if ((not((trunc_ln32_fu_404_p1 = ap_const_lv2_0)) and not((trunc_ln32_fu_404_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln33_fu_420_p1 = ap_const_lv2_1))) then 
            frame_7_we0 <= ap_const_logic_1;
        else 
            frame_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_8_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_8_ce0 <= ap_const_logic_1;
        else 
            frame_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_8_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_8_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if ((not((trunc_ln32_fu_404_p1 = ap_const_lv2_0)) and not((trunc_ln33_fu_420_p1 = ap_const_lv2_0)) and not((trunc_ln33_fu_420_p1 = ap_const_lv2_1)) and not((trunc_ln32_fu_404_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_8_we0 <= ap_const_logic_1;
        else 
            frame_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_address0 <= zext_ln35_2_fu_408_p1(9 - 1 downto 0);

    frame_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            frame_ce0 <= ap_const_logic_1;
        else 
            frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_d0 <= trunc_ln35_reg_464_pp0_iter8_reg;

    frame_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln32_fu_404_p1, trunc_ln33_fu_420_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln33_fu_420_p1 = ap_const_lv2_0) and (trunc_ln32_fu_404_p1 = ap_const_lv2_0))) then 
            frame_we0 <= ap_const_logic_1;
        else 
            frame_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_333_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_333_p1 <= ap_const_lv6_3(3 - 1 downto 0);

    grp_fu_369_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_369_ce <= ap_const_logic_1;
        else 
            grp_fu_369_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_369_p1 <= ap_const_lv6_3(3 - 1 downto 0);
    icmp_ln32_fu_249_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv12_9C4) else "0";
    icmp_ln33_fu_273_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv6_32) else "0";
    mul_ln32_fu_299_p0 <= mul_ln32_fu_299_p00(6 - 1 downto 0);
    mul_ln32_fu_299_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_fu_287_p3),13));
    mul_ln32_fu_299_p1 <= ap_const_lv13_56(8 - 1 downto 0);
    mul_ln33_fu_343_p0 <= mul_ln33_fu_343_p00(6 - 1 downto 0);
    mul_ln33_fu_343_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_279_p3),13));
    mul_ln33_fu_343_p1 <= ap_const_lv13_56(8 - 1 downto 0);
    select_ln32_1_fu_287_p3 <= 
        add_ln32_fu_267_p2 when (icmp_ln33_fu_273_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln32_fu_279_p3 <= 
        ap_const_lv6_0 when (icmp_ln33_fu_273_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_33_fu_319_p3 <= (tmp_fu_305_p4 & ap_const_lv4_0);
    tmp_46_fu_349_p4 <= mul_ln33_fu_343_p2(12 downto 8);
    tmp_fu_305_p4 <= mul_ln32_fu_299_p2(12 downto 8);
    trunc_ln32_fu_404_p1 <= grp_fu_333_p2(2 - 1 downto 0);
    trunc_ln33_fu_420_p1 <= grp_fu_369_p2(2 - 1 downto 0);
    trunc_ln35_fu_379_p1 <= S_AXIS_TDATA(8 - 1 downto 0);
    zext_ln35_1_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_349_p4),9));
    zext_ln35_2_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_reg_459_pp0_iter8_reg),64));
    zext_ln35_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_305_p4),9));
end behav;
