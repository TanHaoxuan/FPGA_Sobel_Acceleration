// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_56_7_VITIS_LOOP_57_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_AXIS_TREADY,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TKEEP,
        M_AXIS_TSTRB,
        M_AXIS_TLAST,
        output_r_address0,
        output_r_ce0,
        output_r_q0,
        output_1_address0,
        output_1_ce0,
        output_1_q0,
        output_2_address0,
        output_2_ce0,
        output_2_q0,
        output_3_address0,
        output_3_ce0,
        output_3_q0,
        output_4_address0,
        output_4_ce0,
        output_4_q0,
        output_5_address0,
        output_5_ce0,
        output_5_q0,
        output_6_address0,
        output_6_ce0,
        output_6_q0,
        output_7_address0,
        output_7_ce0,
        output_7_q0,
        output_8_address0,
        output_8_ce0,
        output_8_q0,
        output_9_address0,
        output_9_ce0,
        output_9_q0,
        output_10_address0,
        output_10_ce0,
        output_10_q0,
        output_11_address0,
        output_11_ce0,
        output_11_q0,
        output_12_address0,
        output_12_ce0,
        output_12_q0,
        output_13_address0,
        output_13_ce0,
        output_13_q0,
        output_14_address0,
        output_14_ce0,
        output_14_q0,
        output_15_address0,
        output_15_ce0,
        output_15_q0,
        output_16_address0,
        output_16_ce0,
        output_16_q0,
        output_17_address0,
        output_17_ce0,
        output_17_q0,
        output_18_address0,
        output_18_ce0,
        output_18_q0,
        output_19_address0,
        output_19_ce0,
        output_19_q0,
        output_20_address0,
        output_20_ce0,
        output_20_q0,
        output_21_address0,
        output_21_ce0,
        output_21_q0,
        output_22_address0,
        output_22_ce0,
        output_22_q0,
        output_23_address0,
        output_23_ce0,
        output_23_q0,
        output_24_address0,
        output_24_ce0,
        output_24_q0,
        output_25_address0,
        output_25_ce0,
        output_25_q0,
        output_26_address0,
        output_26_ce0,
        output_26_q0,
        output_27_address0,
        output_27_ce0,
        output_27_q0,
        output_28_address0,
        output_28_ce0,
        output_28_q0,
        output_29_address0,
        output_29_ce0,
        output_29_q0,
        output_30_address0,
        output_30_ce0,
        output_30_q0,
        output_31_address0,
        output_31_ce0,
        output_31_q0,
        output_32_address0,
        output_32_ce0,
        output_32_q0,
        output_33_address0,
        output_33_ce0,
        output_33_q0,
        output_34_address0,
        output_34_ce0,
        output_34_q0,
        output_35_address0,
        output_35_ce0,
        output_35_q0,
        output_36_address0,
        output_36_ce0,
        output_36_q0,
        output_37_address0,
        output_37_ce0,
        output_37_q0,
        output_38_address0,
        output_38_ce0,
        output_38_q0,
        output_39_address0,
        output_39_ce0,
        output_39_q0,
        output_40_address0,
        output_40_ce0,
        output_40_q0,
        output_41_address0,
        output_41_ce0,
        output_41_q0,
        output_42_address0,
        output_42_ce0,
        output_42_q0,
        output_43_address0,
        output_43_ce0,
        output_43_q0,
        output_44_address0,
        output_44_ce0,
        output_44_q0,
        output_45_address0,
        output_45_ce0,
        output_45_q0,
        output_46_address0,
        output_46_ce0,
        output_46_q0,
        output_47_address0,
        output_47_ce0,
        output_47_q0,
        output_48_address0,
        output_48_ce0,
        output_48_q0,
        output_49_address0,
        output_49_ce0,
        output_49_q0,
        output_50_address0,
        output_50_ce0,
        output_50_q0,
        output_51_address0,
        output_51_ce0,
        output_51_q0,
        output_52_address0,
        output_52_ce0,
        output_52_q0,
        output_53_address0,
        output_53_ce0,
        output_53_q0,
        output_54_address0,
        output_54_ce0,
        output_54_q0,
        output_55_address0,
        output_55_ce0,
        output_55_q0,
        output_56_address0,
        output_56_ce0,
        output_56_q0,
        output_57_address0,
        output_57_ce0,
        output_57_q0,
        output_58_address0,
        output_58_ce0,
        output_58_q0,
        output_59_address0,
        output_59_ce0,
        output_59_q0,
        output_60_address0,
        output_60_ce0,
        output_60_q0,
        output_61_address0,
        output_61_ce0,
        output_61_q0,
        output_62_address0,
        output_62_ce0,
        output_62_q0,
        output_63_address0,
        output_63_ce0,
        output_63_q0,
        output_64_address0,
        output_64_ce0,
        output_64_q0,
        output_65_address0,
        output_65_ce0,
        output_65_q0,
        output_66_address0,
        output_66_ce0,
        output_66_q0,
        output_67_address0,
        output_67_ce0,
        output_67_q0,
        output_68_address0,
        output_68_ce0,
        output_68_q0,
        output_69_address0,
        output_69_ce0,
        output_69_q0,
        output_70_address0,
        output_70_ce0,
        output_70_q0,
        output_71_address0,
        output_71_ce0,
        output_71_q0,
        output_72_address0,
        output_72_ce0,
        output_72_q0,
        output_73_address0,
        output_73_ce0,
        output_73_q0,
        output_74_address0,
        output_74_ce0,
        output_74_q0,
        output_75_address0,
        output_75_ce0,
        output_75_q0,
        output_76_address0,
        output_76_ce0,
        output_76_q0,
        output_77_address0,
        output_77_ce0,
        output_77_q0,
        output_78_address0,
        output_78_ce0,
        output_78_q0,
        output_79_address0,
        output_79_ce0,
        output_79_q0,
        output_80_address0,
        output_80_ce0,
        output_80_q0,
        output_81_address0,
        output_81_ce0,
        output_81_q0,
        output_82_address0,
        output_82_ce0,
        output_82_q0,
        output_83_address0,
        output_83_ce0,
        output_83_q0,
        output_84_address0,
        output_84_ce0,
        output_84_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   M_AXIS_TREADY;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
output  [3:0] M_AXIS_TKEEP;
output  [3:0] M_AXIS_TSTRB;
output  [0:0] M_AXIS_TLAST;
output  [6:0] output_r_address0;
output   output_r_ce0;
input  [0:0] output_r_q0;
output  [6:0] output_1_address0;
output   output_1_ce0;
input  [7:0] output_1_q0;
output  [6:0] output_2_address0;
output   output_2_ce0;
input  [7:0] output_2_q0;
output  [6:0] output_3_address0;
output   output_3_ce0;
input  [7:0] output_3_q0;
output  [6:0] output_4_address0;
output   output_4_ce0;
input  [7:0] output_4_q0;
output  [6:0] output_5_address0;
output   output_5_ce0;
input  [7:0] output_5_q0;
output  [6:0] output_6_address0;
output   output_6_ce0;
input  [7:0] output_6_q0;
output  [6:0] output_7_address0;
output   output_7_ce0;
input  [7:0] output_7_q0;
output  [6:0] output_8_address0;
output   output_8_ce0;
input  [7:0] output_8_q0;
output  [6:0] output_9_address0;
output   output_9_ce0;
input  [7:0] output_9_q0;
output  [6:0] output_10_address0;
output   output_10_ce0;
input  [7:0] output_10_q0;
output  [6:0] output_11_address0;
output   output_11_ce0;
input  [7:0] output_11_q0;
output  [6:0] output_12_address0;
output   output_12_ce0;
input  [7:0] output_12_q0;
output  [6:0] output_13_address0;
output   output_13_ce0;
input  [7:0] output_13_q0;
output  [6:0] output_14_address0;
output   output_14_ce0;
input  [7:0] output_14_q0;
output  [6:0] output_15_address0;
output   output_15_ce0;
input  [7:0] output_15_q0;
output  [6:0] output_16_address0;
output   output_16_ce0;
input  [7:0] output_16_q0;
output  [6:0] output_17_address0;
output   output_17_ce0;
input  [7:0] output_17_q0;
output  [6:0] output_18_address0;
output   output_18_ce0;
input  [7:0] output_18_q0;
output  [6:0] output_19_address0;
output   output_19_ce0;
input  [7:0] output_19_q0;
output  [6:0] output_20_address0;
output   output_20_ce0;
input  [7:0] output_20_q0;
output  [6:0] output_21_address0;
output   output_21_ce0;
input  [7:0] output_21_q0;
output  [6:0] output_22_address0;
output   output_22_ce0;
input  [7:0] output_22_q0;
output  [6:0] output_23_address0;
output   output_23_ce0;
input  [7:0] output_23_q0;
output  [6:0] output_24_address0;
output   output_24_ce0;
input  [7:0] output_24_q0;
output  [6:0] output_25_address0;
output   output_25_ce0;
input  [7:0] output_25_q0;
output  [6:0] output_26_address0;
output   output_26_ce0;
input  [7:0] output_26_q0;
output  [6:0] output_27_address0;
output   output_27_ce0;
input  [7:0] output_27_q0;
output  [6:0] output_28_address0;
output   output_28_ce0;
input  [7:0] output_28_q0;
output  [6:0] output_29_address0;
output   output_29_ce0;
input  [7:0] output_29_q0;
output  [6:0] output_30_address0;
output   output_30_ce0;
input  [7:0] output_30_q0;
output  [6:0] output_31_address0;
output   output_31_ce0;
input  [7:0] output_31_q0;
output  [6:0] output_32_address0;
output   output_32_ce0;
input  [7:0] output_32_q0;
output  [6:0] output_33_address0;
output   output_33_ce0;
input  [7:0] output_33_q0;
output  [6:0] output_34_address0;
output   output_34_ce0;
input  [7:0] output_34_q0;
output  [6:0] output_35_address0;
output   output_35_ce0;
input  [7:0] output_35_q0;
output  [6:0] output_36_address0;
output   output_36_ce0;
input  [7:0] output_36_q0;
output  [6:0] output_37_address0;
output   output_37_ce0;
input  [7:0] output_37_q0;
output  [6:0] output_38_address0;
output   output_38_ce0;
input  [7:0] output_38_q0;
output  [6:0] output_39_address0;
output   output_39_ce0;
input  [7:0] output_39_q0;
output  [6:0] output_40_address0;
output   output_40_ce0;
input  [7:0] output_40_q0;
output  [6:0] output_41_address0;
output   output_41_ce0;
input  [7:0] output_41_q0;
output  [6:0] output_42_address0;
output   output_42_ce0;
input  [7:0] output_42_q0;
output  [6:0] output_43_address0;
output   output_43_ce0;
input  [7:0] output_43_q0;
output  [6:0] output_44_address0;
output   output_44_ce0;
input  [7:0] output_44_q0;
output  [6:0] output_45_address0;
output   output_45_ce0;
input  [7:0] output_45_q0;
output  [6:0] output_46_address0;
output   output_46_ce0;
input  [7:0] output_46_q0;
output  [6:0] output_47_address0;
output   output_47_ce0;
input  [7:0] output_47_q0;
output  [6:0] output_48_address0;
output   output_48_ce0;
input  [7:0] output_48_q0;
output  [6:0] output_49_address0;
output   output_49_ce0;
input  [7:0] output_49_q0;
output  [6:0] output_50_address0;
output   output_50_ce0;
input  [7:0] output_50_q0;
output  [6:0] output_51_address0;
output   output_51_ce0;
input  [7:0] output_51_q0;
output  [6:0] output_52_address0;
output   output_52_ce0;
input  [7:0] output_52_q0;
output  [6:0] output_53_address0;
output   output_53_ce0;
input  [7:0] output_53_q0;
output  [6:0] output_54_address0;
output   output_54_ce0;
input  [7:0] output_54_q0;
output  [6:0] output_55_address0;
output   output_55_ce0;
input  [7:0] output_55_q0;
output  [6:0] output_56_address0;
output   output_56_ce0;
input  [7:0] output_56_q0;
output  [6:0] output_57_address0;
output   output_57_ce0;
input  [7:0] output_57_q0;
output  [6:0] output_58_address0;
output   output_58_ce0;
input  [7:0] output_58_q0;
output  [6:0] output_59_address0;
output   output_59_ce0;
input  [7:0] output_59_q0;
output  [6:0] output_60_address0;
output   output_60_ce0;
input  [7:0] output_60_q0;
output  [6:0] output_61_address0;
output   output_61_ce0;
input  [7:0] output_61_q0;
output  [6:0] output_62_address0;
output   output_62_ce0;
input  [7:0] output_62_q0;
output  [6:0] output_63_address0;
output   output_63_ce0;
input  [7:0] output_63_q0;
output  [6:0] output_64_address0;
output   output_64_ce0;
input  [7:0] output_64_q0;
output  [6:0] output_65_address0;
output   output_65_ce0;
input  [7:0] output_65_q0;
output  [6:0] output_66_address0;
output   output_66_ce0;
input  [7:0] output_66_q0;
output  [6:0] output_67_address0;
output   output_67_ce0;
input  [7:0] output_67_q0;
output  [6:0] output_68_address0;
output   output_68_ce0;
input  [7:0] output_68_q0;
output  [6:0] output_69_address0;
output   output_69_ce0;
input  [7:0] output_69_q0;
output  [6:0] output_70_address0;
output   output_70_ce0;
input  [7:0] output_70_q0;
output  [6:0] output_71_address0;
output   output_71_ce0;
input  [7:0] output_71_q0;
output  [6:0] output_72_address0;
output   output_72_ce0;
input  [7:0] output_72_q0;
output  [6:0] output_73_address0;
output   output_73_ce0;
input  [7:0] output_73_q0;
output  [6:0] output_74_address0;
output   output_74_ce0;
input  [7:0] output_74_q0;
output  [6:0] output_75_address0;
output   output_75_ce0;
input  [7:0] output_75_q0;
output  [6:0] output_76_address0;
output   output_76_ce0;
input  [7:0] output_76_q0;
output  [6:0] output_77_address0;
output   output_77_ce0;
input  [7:0] output_77_q0;
output  [6:0] output_78_address0;
output   output_78_ce0;
input  [7:0] output_78_q0;
output  [6:0] output_79_address0;
output   output_79_ce0;
input  [7:0] output_79_q0;
output  [6:0] output_80_address0;
output   output_80_ce0;
input  [7:0] output_80_q0;
output  [6:0] output_81_address0;
output   output_81_ce0;
input  [7:0] output_81_q0;
output  [6:0] output_82_address0;
output   output_82_ce0;
input  [7:0] output_82_q0;
output  [6:0] output_83_address0;
output   output_83_ce0;
input  [7:0] output_83_q0;
output  [6:0] output_84_address0;
output   output_84_ce0;
input  [0:0] output_84_q0;

reg ap_idle;
reg M_AXIS_TVALID;
reg output_r_ce0;
reg output_1_ce0;
reg output_2_ce0;
reg output_3_ce0;
reg output_4_ce0;
reg output_5_ce0;
reg output_6_ce0;
reg output_7_ce0;
reg output_8_ce0;
reg output_9_ce0;
reg output_10_ce0;
reg output_11_ce0;
reg output_12_ce0;
reg output_13_ce0;
reg output_14_ce0;
reg output_15_ce0;
reg output_16_ce0;
reg output_17_ce0;
reg output_18_ce0;
reg output_19_ce0;
reg output_20_ce0;
reg output_21_ce0;
reg output_22_ce0;
reg output_23_ce0;
reg output_24_ce0;
reg output_25_ce0;
reg output_26_ce0;
reg output_27_ce0;
reg output_28_ce0;
reg output_29_ce0;
reg output_30_ce0;
reg output_31_ce0;
reg output_32_ce0;
reg output_33_ce0;
reg output_34_ce0;
reg output_35_ce0;
reg output_36_ce0;
reg output_37_ce0;
reg output_38_ce0;
reg output_39_ce0;
reg output_40_ce0;
reg output_41_ce0;
reg output_42_ce0;
reg output_43_ce0;
reg output_44_ce0;
reg output_45_ce0;
reg output_46_ce0;
reg output_47_ce0;
reg output_48_ce0;
reg output_49_ce0;
reg output_50_ce0;
reg output_51_ce0;
reg output_52_ce0;
reg output_53_ce0;
reg output_54_ce0;
reg output_55_ce0;
reg output_56_ce0;
reg output_57_ce0;
reg output_58_ce0;
reg output_59_ce0;
reg output_60_ce0;
reg output_61_ce0;
reg output_62_ce0;
reg output_63_ce0;
reg output_64_ce0;
reg output_65_ce0;
reg output_66_ce0;
reg output_67_ce0;
reg output_68_ce0;
reg output_69_ce0;
reg output_70_ce0;
reg output_71_ce0;
reg output_72_ce0;
reg output_73_ce0;
reg output_74_ce0;
reg output_75_ce0;
reg output_76_ce0;
reg output_77_ce0;
reg output_78_ce0;
reg output_79_ce0;
reg output_80_ce0;
reg output_81_ce0;
reg output_82_ce0;
reg output_83_ce0;
reg output_84_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln56_reg_3654;
reg   [0:0] icmp_ln56_reg_3654_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln56_fu_1904_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    M_AXIS_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln56_fu_1928_p2;
reg   [0:0] or_ln56_reg_3658;
wire   [6:0] select_ln56_fu_1934_p3;
reg   [6:0] select_ln56_reg_3662;
reg   [6:0] select_ln56_reg_3662_pp0_iter1_reg;
wire   [0:0] cmp103_fu_2045_p2;
reg   [0:0] cmp103_reg_4093;
reg   [0:0] cmp103_reg_4093_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_first_iter_2_phi_fu_1878_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln56_fu_1956_p1;
reg   [6:0] j_fu_400;
wire   [6:0] add_ln57_fu_2051_p2;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_404;
wire   [6:0] select_ln56_1_fu_1948_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [12:0] indvar_flatten183_fu_408;
wire   [12:0] add_ln56_fu_1910_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten183_load;
reg   [0:0] output_84_load1_fu_412;
reg   [7:0] output_83_load3_fu_416;
reg   [7:0] output_82_load5_fu_420;
reg   [7:0] output_81_load7_fu_424;
reg   [7:0] output_80_load9_fu_428;
reg   [7:0] output_79_load11_fu_432;
reg   [7:0] output_78_load13_fu_436;
reg   [7:0] output_77_load15_fu_440;
reg   [7:0] output_76_load17_fu_444;
reg   [7:0] output_75_load19_fu_448;
reg   [7:0] output_74_load21_fu_452;
reg   [7:0] output_73_load23_fu_456;
reg   [7:0] output_72_load25_fu_460;
reg   [7:0] output_71_load27_fu_464;
reg   [7:0] output_70_load29_fu_468;
reg   [7:0] output_69_load31_fu_472;
reg   [7:0] output_68_load33_fu_476;
reg   [7:0] output_67_load35_fu_480;
reg   [7:0] output_66_load37_fu_484;
reg   [7:0] output_65_load39_fu_488;
reg   [7:0] output_64_load41_fu_492;
reg   [7:0] output_63_load43_fu_496;
reg   [7:0] output_62_load45_fu_500;
reg   [7:0] output_61_load47_fu_504;
reg   [7:0] output_60_load49_fu_508;
reg   [7:0] output_59_load51_fu_512;
reg   [7:0] output_58_load53_fu_516;
reg   [7:0] output_57_load55_fu_520;
reg   [7:0] output_56_load57_fu_524;
reg   [7:0] output_55_load59_fu_528;
reg   [7:0] output_54_load61_fu_532;
reg   [7:0] output_53_load63_fu_536;
reg   [7:0] output_52_load65_fu_540;
reg   [7:0] output_51_load67_fu_544;
reg   [7:0] output_50_load69_fu_548;
reg   [7:0] output_49_load71_fu_552;
reg   [7:0] output_48_load73_fu_556;
reg   [7:0] output_47_load75_fu_560;
reg   [7:0] output_46_load77_fu_564;
reg   [7:0] output_45_load79_fu_568;
reg   [7:0] output_44_load81_fu_572;
reg   [7:0] output_43_load83_fu_576;
reg   [7:0] output_42_load85_fu_580;
reg   [7:0] output_41_load87_fu_584;
reg   [7:0] output_40_load89_fu_588;
reg   [7:0] output_39_load91_fu_592;
reg   [7:0] output_38_load93_fu_596;
reg   [7:0] output_37_load95_fu_600;
reg   [7:0] output_36_load97_fu_604;
reg   [7:0] output_35_load99_fu_608;
reg   [7:0] output_34_load101_fu_612;
reg   [7:0] output_33_load103_fu_616;
reg   [7:0] output_32_load105_fu_620;
reg   [7:0] output_31_load107_fu_624;
reg   [7:0] output_30_load109_fu_628;
reg   [7:0] output_29_load111_fu_632;
reg   [7:0] output_28_load113_fu_636;
reg   [7:0] output_27_load115_fu_640;
reg   [7:0] output_26_load117_fu_644;
reg   [7:0] output_25_load119_fu_648;
reg   [7:0] output_24_load121_fu_652;
reg   [7:0] output_23_load123_fu_656;
reg   [7:0] output_22_load125_fu_660;
reg   [7:0] output_21_load127_fu_664;
reg   [7:0] output_20_load129_fu_668;
reg   [7:0] output_19_load131_fu_672;
reg   [7:0] output_18_load133_fu_676;
reg   [7:0] output_17_load135_fu_680;
reg   [7:0] output_16_load137_fu_684;
reg   [7:0] output_15_load139_fu_688;
reg   [7:0] output_14_load141_fu_692;
reg   [7:0] output_13_load143_fu_696;
reg   [7:0] output_12_load145_fu_700;
reg   [7:0] output_11_load147_fu_704;
reg   [7:0] output_10_load149_fu_708;
reg   [7:0] output_9_load151_fu_712;
reg   [7:0] output_8_load153_fu_716;
reg   [7:0] output_7_load155_fu_720;
reg   [7:0] output_6_load157_fu_724;
reg   [7:0] output_5_load159_fu_728;
reg   [7:0] output_4_load161_fu_732;
reg   [7:0] output_3_load163_fu_736;
reg   [7:0] output_2_load165_fu_740;
reg   [7:0] output_1_load167_fu_744;
reg   [0:0] output_load169_fu_748;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln57_fu_1922_p2;
wire   [6:0] add_ln56_1_fu_1942_p2;
wire   [7:0] write_output_data_fu_2760_p2;
wire   [7:0] write_output_data_fu_2760_p170;
wire   [7:0] write_output_data_fu_2760_p171;
wire   [7:0] write_output_data_fu_2760_p173;
wire   [0:0] icmp_ln59_fu_3112_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_2189;
wire   [6:0] write_output_data_fu_2760_p1;
wire   [6:0] write_output_data_fu_2760_p3;
wire   [6:0] write_output_data_fu_2760_p5;
wire   [6:0] write_output_data_fu_2760_p7;
wire   [6:0] write_output_data_fu_2760_p9;
wire   [6:0] write_output_data_fu_2760_p11;
wire   [6:0] write_output_data_fu_2760_p13;
wire   [6:0] write_output_data_fu_2760_p15;
wire   [6:0] write_output_data_fu_2760_p17;
wire   [6:0] write_output_data_fu_2760_p19;
wire   [6:0] write_output_data_fu_2760_p21;
wire   [6:0] write_output_data_fu_2760_p23;
wire   [6:0] write_output_data_fu_2760_p25;
wire   [6:0] write_output_data_fu_2760_p27;
wire   [6:0] write_output_data_fu_2760_p29;
wire   [6:0] write_output_data_fu_2760_p31;
wire   [6:0] write_output_data_fu_2760_p33;
wire   [6:0] write_output_data_fu_2760_p35;
wire   [6:0] write_output_data_fu_2760_p37;
wire   [6:0] write_output_data_fu_2760_p39;
wire   [6:0] write_output_data_fu_2760_p41;
wire   [6:0] write_output_data_fu_2760_p43;
wire   [6:0] write_output_data_fu_2760_p45;
wire   [6:0] write_output_data_fu_2760_p47;
wire   [6:0] write_output_data_fu_2760_p49;
wire   [6:0] write_output_data_fu_2760_p51;
wire   [6:0] write_output_data_fu_2760_p53;
wire   [6:0] write_output_data_fu_2760_p55;
wire   [6:0] write_output_data_fu_2760_p57;
wire   [6:0] write_output_data_fu_2760_p59;
wire   [6:0] write_output_data_fu_2760_p61;
wire   [6:0] write_output_data_fu_2760_p63;
wire   [6:0] write_output_data_fu_2760_p65;
wire   [6:0] write_output_data_fu_2760_p67;
wire   [6:0] write_output_data_fu_2760_p69;
wire   [6:0] write_output_data_fu_2760_p71;
wire   [6:0] write_output_data_fu_2760_p73;
wire   [6:0] write_output_data_fu_2760_p75;
wire   [6:0] write_output_data_fu_2760_p77;
wire   [6:0] write_output_data_fu_2760_p79;
wire   [6:0] write_output_data_fu_2760_p81;
wire   [6:0] write_output_data_fu_2760_p83;
wire   [6:0] write_output_data_fu_2760_p85;
wire   [6:0] write_output_data_fu_2760_p87;
wire   [6:0] write_output_data_fu_2760_p89;
wire   [6:0] write_output_data_fu_2760_p91;
wire   [6:0] write_output_data_fu_2760_p93;
wire   [6:0] write_output_data_fu_2760_p95;
wire   [6:0] write_output_data_fu_2760_p97;
wire   [6:0] write_output_data_fu_2760_p99;
wire   [6:0] write_output_data_fu_2760_p101;
wire   [6:0] write_output_data_fu_2760_p103;
wire   [6:0] write_output_data_fu_2760_p105;
wire   [6:0] write_output_data_fu_2760_p107;
wire   [6:0] write_output_data_fu_2760_p109;
wire   [6:0] write_output_data_fu_2760_p111;
wire   [6:0] write_output_data_fu_2760_p113;
wire   [6:0] write_output_data_fu_2760_p115;
wire   [6:0] write_output_data_fu_2760_p117;
wire   [6:0] write_output_data_fu_2760_p119;
wire   [6:0] write_output_data_fu_2760_p121;
wire   [6:0] write_output_data_fu_2760_p123;
wire   [6:0] write_output_data_fu_2760_p125;
wire   [6:0] write_output_data_fu_2760_p127;
wire  signed [6:0] write_output_data_fu_2760_p129;
wire  signed [6:0] write_output_data_fu_2760_p131;
wire  signed [6:0] write_output_data_fu_2760_p133;
wire  signed [6:0] write_output_data_fu_2760_p135;
wire  signed [6:0] write_output_data_fu_2760_p137;
wire  signed [6:0] write_output_data_fu_2760_p139;
wire  signed [6:0] write_output_data_fu_2760_p141;
wire  signed [6:0] write_output_data_fu_2760_p143;
wire  signed [6:0] write_output_data_fu_2760_p145;
wire  signed [6:0] write_output_data_fu_2760_p147;
wire  signed [6:0] write_output_data_fu_2760_p149;
wire  signed [6:0] write_output_data_fu_2760_p151;
wire  signed [6:0] write_output_data_fu_2760_p153;
wire  signed [6:0] write_output_data_fu_2760_p155;
wire  signed [6:0] write_output_data_fu_2760_p157;
wire  signed [6:0] write_output_data_fu_2760_p159;
wire  signed [6:0] write_output_data_fu_2760_p161;
wire  signed [6:0] write_output_data_fu_2760_p163;
wire  signed [6:0] write_output_data_fu_2760_p165;
wire  signed [6:0] write_output_data_fu_2760_p167;
wire  signed [6:0] write_output_data_fu_2760_p169;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_400 = 7'd0;
#0 i_fu_404 = 7'd0;
#0 indvar_flatten183_fu_408 = 13'd0;
#0 output_84_load1_fu_412 = 1'd0;
#0 output_83_load3_fu_416 = 8'd0;
#0 output_82_load5_fu_420 = 8'd0;
#0 output_81_load7_fu_424 = 8'd0;
#0 output_80_load9_fu_428 = 8'd0;
#0 output_79_load11_fu_432 = 8'd0;
#0 output_78_load13_fu_436 = 8'd0;
#0 output_77_load15_fu_440 = 8'd0;
#0 output_76_load17_fu_444 = 8'd0;
#0 output_75_load19_fu_448 = 8'd0;
#0 output_74_load21_fu_452 = 8'd0;
#0 output_73_load23_fu_456 = 8'd0;
#0 output_72_load25_fu_460 = 8'd0;
#0 output_71_load27_fu_464 = 8'd0;
#0 output_70_load29_fu_468 = 8'd0;
#0 output_69_load31_fu_472 = 8'd0;
#0 output_68_load33_fu_476 = 8'd0;
#0 output_67_load35_fu_480 = 8'd0;
#0 output_66_load37_fu_484 = 8'd0;
#0 output_65_load39_fu_488 = 8'd0;
#0 output_64_load41_fu_492 = 8'd0;
#0 output_63_load43_fu_496 = 8'd0;
#0 output_62_load45_fu_500 = 8'd0;
#0 output_61_load47_fu_504 = 8'd0;
#0 output_60_load49_fu_508 = 8'd0;
#0 output_59_load51_fu_512 = 8'd0;
#0 output_58_load53_fu_516 = 8'd0;
#0 output_57_load55_fu_520 = 8'd0;
#0 output_56_load57_fu_524 = 8'd0;
#0 output_55_load59_fu_528 = 8'd0;
#0 output_54_load61_fu_532 = 8'd0;
#0 output_53_load63_fu_536 = 8'd0;
#0 output_52_load65_fu_540 = 8'd0;
#0 output_51_load67_fu_544 = 8'd0;
#0 output_50_load69_fu_548 = 8'd0;
#0 output_49_load71_fu_552 = 8'd0;
#0 output_48_load73_fu_556 = 8'd0;
#0 output_47_load75_fu_560 = 8'd0;
#0 output_46_load77_fu_564 = 8'd0;
#0 output_45_load79_fu_568 = 8'd0;
#0 output_44_load81_fu_572 = 8'd0;
#0 output_43_load83_fu_576 = 8'd0;
#0 output_42_load85_fu_580 = 8'd0;
#0 output_41_load87_fu_584 = 8'd0;
#0 output_40_load89_fu_588 = 8'd0;
#0 output_39_load91_fu_592 = 8'd0;
#0 output_38_load93_fu_596 = 8'd0;
#0 output_37_load95_fu_600 = 8'd0;
#0 output_36_load97_fu_604 = 8'd0;
#0 output_35_load99_fu_608 = 8'd0;
#0 output_34_load101_fu_612 = 8'd0;
#0 output_33_load103_fu_616 = 8'd0;
#0 output_32_load105_fu_620 = 8'd0;
#0 output_31_load107_fu_624 = 8'd0;
#0 output_30_load109_fu_628 = 8'd0;
#0 output_29_load111_fu_632 = 8'd0;
#0 output_28_load113_fu_636 = 8'd0;
#0 output_27_load115_fu_640 = 8'd0;
#0 output_26_load117_fu_644 = 8'd0;
#0 output_25_load119_fu_648 = 8'd0;
#0 output_24_load121_fu_652 = 8'd0;
#0 output_23_load123_fu_656 = 8'd0;
#0 output_22_load125_fu_660 = 8'd0;
#0 output_21_load127_fu_664 = 8'd0;
#0 output_20_load129_fu_668 = 8'd0;
#0 output_19_load131_fu_672 = 8'd0;
#0 output_18_load133_fu_676 = 8'd0;
#0 output_17_load135_fu_680 = 8'd0;
#0 output_16_load137_fu_684 = 8'd0;
#0 output_15_load139_fu_688 = 8'd0;
#0 output_14_load141_fu_692 = 8'd0;
#0 output_13_load143_fu_696 = 8'd0;
#0 output_12_load145_fu_700 = 8'd0;
#0 output_11_load147_fu_704 = 8'd0;
#0 output_10_load149_fu_708 = 8'd0;
#0 output_9_load151_fu_712 = 8'd0;
#0 output_8_load153_fu_716 = 8'd0;
#0 output_7_load155_fu_720 = 8'd0;
#0 output_6_load157_fu_724 = 8'd0;
#0 output_5_load159_fu_728 = 8'd0;
#0 output_4_load161_fu_732 = 8'd0;
#0 output_3_load163_fu_736 = 8'd0;
#0 output_2_load165_fu_740 = 8'd0;
#0 output_1_load167_fu_744 = 8'd0;
#0 output_load169_fu_748 = 1'd0;
#0 ap_done_reg = 1'b0;
end

sobel_hls_sparsemux_171_7_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 7'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 7'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 7'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 7'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 7'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 7'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 7'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 7'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 7'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 7'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 7'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 7'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 7'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 7'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 7'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 7'hF ),
    .din15_WIDTH( 8 ),
    .CASE16( 7'h10 ),
    .din16_WIDTH( 8 ),
    .CASE17( 7'h11 ),
    .din17_WIDTH( 8 ),
    .CASE18( 7'h12 ),
    .din18_WIDTH( 8 ),
    .CASE19( 7'h13 ),
    .din19_WIDTH( 8 ),
    .CASE20( 7'h14 ),
    .din20_WIDTH( 8 ),
    .CASE21( 7'h15 ),
    .din21_WIDTH( 8 ),
    .CASE22( 7'h16 ),
    .din22_WIDTH( 8 ),
    .CASE23( 7'h17 ),
    .din23_WIDTH( 8 ),
    .CASE24( 7'h18 ),
    .din24_WIDTH( 8 ),
    .CASE25( 7'h19 ),
    .din25_WIDTH( 8 ),
    .CASE26( 7'h1A ),
    .din26_WIDTH( 8 ),
    .CASE27( 7'h1B ),
    .din27_WIDTH( 8 ),
    .CASE28( 7'h1C ),
    .din28_WIDTH( 8 ),
    .CASE29( 7'h1D ),
    .din29_WIDTH( 8 ),
    .CASE30( 7'h1E ),
    .din30_WIDTH( 8 ),
    .CASE31( 7'h1F ),
    .din31_WIDTH( 8 ),
    .CASE32( 7'h20 ),
    .din32_WIDTH( 8 ),
    .CASE33( 7'h21 ),
    .din33_WIDTH( 8 ),
    .CASE34( 7'h22 ),
    .din34_WIDTH( 8 ),
    .CASE35( 7'h23 ),
    .din35_WIDTH( 8 ),
    .CASE36( 7'h24 ),
    .din36_WIDTH( 8 ),
    .CASE37( 7'h25 ),
    .din37_WIDTH( 8 ),
    .CASE38( 7'h26 ),
    .din38_WIDTH( 8 ),
    .CASE39( 7'h27 ),
    .din39_WIDTH( 8 ),
    .CASE40( 7'h28 ),
    .din40_WIDTH( 8 ),
    .CASE41( 7'h29 ),
    .din41_WIDTH( 8 ),
    .CASE42( 7'h2A ),
    .din42_WIDTH( 8 ),
    .CASE43( 7'h2B ),
    .din43_WIDTH( 8 ),
    .CASE44( 7'h2C ),
    .din44_WIDTH( 8 ),
    .CASE45( 7'h2D ),
    .din45_WIDTH( 8 ),
    .CASE46( 7'h2E ),
    .din46_WIDTH( 8 ),
    .CASE47( 7'h2F ),
    .din47_WIDTH( 8 ),
    .CASE48( 7'h30 ),
    .din48_WIDTH( 8 ),
    .CASE49( 7'h31 ),
    .din49_WIDTH( 8 ),
    .CASE50( 7'h32 ),
    .din50_WIDTH( 8 ),
    .CASE51( 7'h33 ),
    .din51_WIDTH( 8 ),
    .CASE52( 7'h34 ),
    .din52_WIDTH( 8 ),
    .CASE53( 7'h35 ),
    .din53_WIDTH( 8 ),
    .CASE54( 7'h36 ),
    .din54_WIDTH( 8 ),
    .CASE55( 7'h37 ),
    .din55_WIDTH( 8 ),
    .CASE56( 7'h38 ),
    .din56_WIDTH( 8 ),
    .CASE57( 7'h39 ),
    .din57_WIDTH( 8 ),
    .CASE58( 7'h3A ),
    .din58_WIDTH( 8 ),
    .CASE59( 7'h3B ),
    .din59_WIDTH( 8 ),
    .CASE60( 7'h3C ),
    .din60_WIDTH( 8 ),
    .CASE61( 7'h3D ),
    .din61_WIDTH( 8 ),
    .CASE62( 7'h3E ),
    .din62_WIDTH( 8 ),
    .CASE63( 7'h3F ),
    .din63_WIDTH( 8 ),
    .CASE64( 7'h40 ),
    .din64_WIDTH( 8 ),
    .CASE65( 7'h41 ),
    .din65_WIDTH( 8 ),
    .CASE66( 7'h42 ),
    .din66_WIDTH( 8 ),
    .CASE67( 7'h43 ),
    .din67_WIDTH( 8 ),
    .CASE68( 7'h44 ),
    .din68_WIDTH( 8 ),
    .CASE69( 7'h45 ),
    .din69_WIDTH( 8 ),
    .CASE70( 7'h46 ),
    .din70_WIDTH( 8 ),
    .CASE71( 7'h47 ),
    .din71_WIDTH( 8 ),
    .CASE72( 7'h48 ),
    .din72_WIDTH( 8 ),
    .CASE73( 7'h49 ),
    .din73_WIDTH( 8 ),
    .CASE74( 7'h4A ),
    .din74_WIDTH( 8 ),
    .CASE75( 7'h4B ),
    .din75_WIDTH( 8 ),
    .CASE76( 7'h4C ),
    .din76_WIDTH( 8 ),
    .CASE77( 7'h4D ),
    .din77_WIDTH( 8 ),
    .CASE78( 7'h4E ),
    .din78_WIDTH( 8 ),
    .CASE79( 7'h4F ),
    .din79_WIDTH( 8 ),
    .CASE80( 7'h50 ),
    .din80_WIDTH( 8 ),
    .CASE81( 7'h51 ),
    .din81_WIDTH( 8 ),
    .CASE82( 7'h52 ),
    .din82_WIDTH( 8 ),
    .CASE83( 7'h53 ),
    .din83_WIDTH( 8 ),
    .CASE84( 7'h54 ),
    .din84_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
sparsemux_171_7_8_1_1_U960(
    .din0(write_output_data_fu_2760_p2),
    .din1(output_1_load167_fu_744),
    .din2(output_2_load165_fu_740),
    .din3(output_3_load163_fu_736),
    .din4(output_4_load161_fu_732),
    .din5(output_5_load159_fu_728),
    .din6(output_6_load157_fu_724),
    .din7(output_7_load155_fu_720),
    .din8(output_8_load153_fu_716),
    .din9(output_9_load151_fu_712),
    .din10(output_10_load149_fu_708),
    .din11(output_11_load147_fu_704),
    .din12(output_12_load145_fu_700),
    .din13(output_13_load143_fu_696),
    .din14(output_14_load141_fu_692),
    .din15(output_15_load139_fu_688),
    .din16(output_16_load137_fu_684),
    .din17(output_17_load135_fu_680),
    .din18(output_18_load133_fu_676),
    .din19(output_19_load131_fu_672),
    .din20(output_20_load129_fu_668),
    .din21(output_21_load127_fu_664),
    .din22(output_22_load125_fu_660),
    .din23(output_23_load123_fu_656),
    .din24(output_24_load121_fu_652),
    .din25(output_25_load119_fu_648),
    .din26(output_26_load117_fu_644),
    .din27(output_27_load115_fu_640),
    .din28(output_28_load113_fu_636),
    .din29(output_29_load111_fu_632),
    .din30(output_30_load109_fu_628),
    .din31(output_31_load107_fu_624),
    .din32(output_32_load105_fu_620),
    .din33(output_33_load103_fu_616),
    .din34(output_34_load101_fu_612),
    .din35(output_35_load99_fu_608),
    .din36(output_36_load97_fu_604),
    .din37(output_37_load95_fu_600),
    .din38(output_38_load93_fu_596),
    .din39(output_39_load91_fu_592),
    .din40(output_40_load89_fu_588),
    .din41(output_41_load87_fu_584),
    .din42(output_42_load85_fu_580),
    .din43(output_43_load83_fu_576),
    .din44(output_44_load81_fu_572),
    .din45(output_45_load79_fu_568),
    .din46(output_46_load77_fu_564),
    .din47(output_47_load75_fu_560),
    .din48(output_48_load73_fu_556),
    .din49(output_49_load71_fu_552),
    .din50(output_50_load69_fu_548),
    .din51(output_51_load67_fu_544),
    .din52(output_52_load65_fu_540),
    .din53(output_53_load63_fu_536),
    .din54(output_54_load61_fu_532),
    .din55(output_55_load59_fu_528),
    .din56(output_56_load57_fu_524),
    .din57(output_57_load55_fu_520),
    .din58(output_58_load53_fu_516),
    .din59(output_59_load51_fu_512),
    .din60(output_60_load49_fu_508),
    .din61(output_61_load47_fu_504),
    .din62(output_62_load45_fu_500),
    .din63(output_63_load43_fu_496),
    .din64(output_64_load41_fu_492),
    .din65(output_65_load39_fu_488),
    .din66(output_66_load37_fu_484),
    .din67(output_67_load35_fu_480),
    .din68(output_68_load33_fu_476),
    .din69(output_69_load31_fu_472),
    .din70(output_70_load29_fu_468),
    .din71(output_71_load27_fu_464),
    .din72(output_72_load25_fu_460),
    .din73(output_73_load23_fu_456),
    .din74(output_74_load21_fu_452),
    .din75(output_75_load19_fu_448),
    .din76(output_76_load17_fu_444),
    .din77(output_77_load15_fu_440),
    .din78(output_78_load13_fu_436),
    .din79(output_79_load11_fu_432),
    .din80(output_80_load9_fu_428),
    .din81(output_81_load7_fu_424),
    .din82(output_82_load5_fu_420),
    .din83(output_83_load3_fu_416),
    .din84(write_output_data_fu_2760_p170),
    .def(write_output_data_fu_2760_p171),
    .sel(select_ln56_reg_3662_pp0_iter1_reg),
    .dout(write_output_data_fu_2760_p173)
);

sobel_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln56_fu_1904_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_404 <= select_ln56_1_fu_1948_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_404 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln56_fu_1904_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten183_fu_408 <= add_ln56_fu_1910_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten183_fu_408 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln56_fu_1904_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_400 <= add_ln57_fu_2051_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_400 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        cmp103_reg_4093 <= cmp103_fu_2045_p2;
        cmp103_reg_4093_pp0_iter1_reg <= cmp103_reg_4093;
        icmp_ln56_reg_3654 <= icmp_ln56_fu_1904_p2;
        icmp_ln56_reg_3654_pp0_iter1_reg <= icmp_ln56_reg_3654;
        or_ln56_reg_3658 <= or_ln56_fu_1928_p2;
        select_ln56_reg_3662 <= select_ln56_fu_1934_p3;
        select_ln56_reg_3662_pp0_iter1_reg <= select_ln56_reg_3662;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln56_reg_3658 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_10_load149_fu_708 <= output_10_q0;
        output_11_load147_fu_704 <= output_11_q0;
        output_12_load145_fu_700 <= output_12_q0;
        output_13_load143_fu_696 <= output_13_q0;
        output_14_load141_fu_692 <= output_14_q0;
        output_15_load139_fu_688 <= output_15_q0;
        output_16_load137_fu_684 <= output_16_q0;
        output_17_load135_fu_680 <= output_17_q0;
        output_18_load133_fu_676 <= output_18_q0;
        output_19_load131_fu_672 <= output_19_q0;
        output_1_load167_fu_744 <= output_1_q0;
        output_20_load129_fu_668 <= output_20_q0;
        output_21_load127_fu_664 <= output_21_q0;
        output_22_load125_fu_660 <= output_22_q0;
        output_23_load123_fu_656 <= output_23_q0;
        output_24_load121_fu_652 <= output_24_q0;
        output_25_load119_fu_648 <= output_25_q0;
        output_26_load117_fu_644 <= output_26_q0;
        output_27_load115_fu_640 <= output_27_q0;
        output_28_load113_fu_636 <= output_28_q0;
        output_29_load111_fu_632 <= output_29_q0;
        output_2_load165_fu_740 <= output_2_q0;
        output_30_load109_fu_628 <= output_30_q0;
        output_31_load107_fu_624 <= output_31_q0;
        output_32_load105_fu_620 <= output_32_q0;
        output_33_load103_fu_616 <= output_33_q0;
        output_34_load101_fu_612 <= output_34_q0;
        output_35_load99_fu_608 <= output_35_q0;
        output_36_load97_fu_604 <= output_36_q0;
        output_37_load95_fu_600 <= output_37_q0;
        output_38_load93_fu_596 <= output_38_q0;
        output_39_load91_fu_592 <= output_39_q0;
        output_3_load163_fu_736 <= output_3_q0;
        output_40_load89_fu_588 <= output_40_q0;
        output_41_load87_fu_584 <= output_41_q0;
        output_42_load85_fu_580 <= output_42_q0;
        output_43_load83_fu_576 <= output_43_q0;
        output_44_load81_fu_572 <= output_44_q0;
        output_45_load79_fu_568 <= output_45_q0;
        output_46_load77_fu_564 <= output_46_q0;
        output_47_load75_fu_560 <= output_47_q0;
        output_48_load73_fu_556 <= output_48_q0;
        output_49_load71_fu_552 <= output_49_q0;
        output_4_load161_fu_732 <= output_4_q0;
        output_50_load69_fu_548 <= output_50_q0;
        output_51_load67_fu_544 <= output_51_q0;
        output_52_load65_fu_540 <= output_52_q0;
        output_53_load63_fu_536 <= output_53_q0;
        output_54_load61_fu_532 <= output_54_q0;
        output_55_load59_fu_528 <= output_55_q0;
        output_56_load57_fu_524 <= output_56_q0;
        output_57_load55_fu_520 <= output_57_q0;
        output_58_load53_fu_516 <= output_58_q0;
        output_59_load51_fu_512 <= output_59_q0;
        output_5_load159_fu_728 <= output_5_q0;
        output_60_load49_fu_508 <= output_60_q0;
        output_61_load47_fu_504 <= output_61_q0;
        output_62_load45_fu_500 <= output_62_q0;
        output_63_load43_fu_496 <= output_63_q0;
        output_64_load41_fu_492 <= output_64_q0;
        output_65_load39_fu_488 <= output_65_q0;
        output_66_load37_fu_484 <= output_66_q0;
        output_67_load35_fu_480 <= output_67_q0;
        output_68_load33_fu_476 <= output_68_q0;
        output_69_load31_fu_472 <= output_69_q0;
        output_6_load157_fu_724 <= output_6_q0;
        output_70_load29_fu_468 <= output_70_q0;
        output_71_load27_fu_464 <= output_71_q0;
        output_72_load25_fu_460 <= output_72_q0;
        output_73_load23_fu_456 <= output_73_q0;
        output_74_load21_fu_452 <= output_74_q0;
        output_75_load19_fu_448 <= output_75_q0;
        output_76_load17_fu_444 <= output_76_q0;
        output_77_load15_fu_440 <= output_77_q0;
        output_78_load13_fu_436 <= output_78_q0;
        output_79_load11_fu_432 <= output_79_q0;
        output_7_load155_fu_720 <= output_7_q0;
        output_80_load9_fu_428 <= output_80_q0;
        output_81_load7_fu_424 <= output_81_q0;
        output_82_load5_fu_420 <= output_82_q0;
        output_83_load3_fu_416 <= output_83_q0;
        output_84_load1_fu_412 <= output_84_q0;
        output_8_load153_fu_716 <= output_8_q0;
        output_9_load151_fu_712 <= output_9_q0;
        output_load169_fu_748 <= output_r_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln56_reg_3654_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_reg_3654_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        M_AXIS_TVALID = 1'b1;
    end else begin
        M_AXIS_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_1904_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_2_phi_fu_1878_p4 = 1'd1;
        end else if ((1'b1 == ap_condition_2189)) begin
            ap_phi_mux_first_iter_2_phi_fu_1878_p4 = 1'd0;
        end else begin
            ap_phi_mux_first_iter_2_phi_fu_1878_p4 = 1'd1;
        end
    end else begin
        ap_phi_mux_first_iter_2_phi_fu_1878_p4 = 1'd1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_404;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten183_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten183_load = indvar_flatten183_fu_408;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_400;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_10_ce0 = 1'b1;
    end else begin
        output_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_11_ce0 = 1'b1;
    end else begin
        output_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_12_ce0 = 1'b1;
    end else begin
        output_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_13_ce0 = 1'b1;
    end else begin
        output_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_14_ce0 = 1'b1;
    end else begin
        output_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_15_ce0 = 1'b1;
    end else begin
        output_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_16_ce0 = 1'b1;
    end else begin
        output_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_17_ce0 = 1'b1;
    end else begin
        output_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_18_ce0 = 1'b1;
    end else begin
        output_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_19_ce0 = 1'b1;
    end else begin
        output_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_20_ce0 = 1'b1;
    end else begin
        output_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_21_ce0 = 1'b1;
    end else begin
        output_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_22_ce0 = 1'b1;
    end else begin
        output_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_23_ce0 = 1'b1;
    end else begin
        output_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_24_ce0 = 1'b1;
    end else begin
        output_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_25_ce0 = 1'b1;
    end else begin
        output_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_26_ce0 = 1'b1;
    end else begin
        output_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_27_ce0 = 1'b1;
    end else begin
        output_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_28_ce0 = 1'b1;
    end else begin
        output_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_29_ce0 = 1'b1;
    end else begin
        output_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_30_ce0 = 1'b1;
    end else begin
        output_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_31_ce0 = 1'b1;
    end else begin
        output_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_32_ce0 = 1'b1;
    end else begin
        output_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_33_ce0 = 1'b1;
    end else begin
        output_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_34_ce0 = 1'b1;
    end else begin
        output_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_35_ce0 = 1'b1;
    end else begin
        output_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_36_ce0 = 1'b1;
    end else begin
        output_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_37_ce0 = 1'b1;
    end else begin
        output_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_38_ce0 = 1'b1;
    end else begin
        output_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_39_ce0 = 1'b1;
    end else begin
        output_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_40_ce0 = 1'b1;
    end else begin
        output_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_41_ce0 = 1'b1;
    end else begin
        output_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_42_ce0 = 1'b1;
    end else begin
        output_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_43_ce0 = 1'b1;
    end else begin
        output_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_44_ce0 = 1'b1;
    end else begin
        output_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_45_ce0 = 1'b1;
    end else begin
        output_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_46_ce0 = 1'b1;
    end else begin
        output_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_47_ce0 = 1'b1;
    end else begin
        output_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_48_ce0 = 1'b1;
    end else begin
        output_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_49_ce0 = 1'b1;
    end else begin
        output_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_50_ce0 = 1'b1;
    end else begin
        output_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_51_ce0 = 1'b1;
    end else begin
        output_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_52_ce0 = 1'b1;
    end else begin
        output_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_53_ce0 = 1'b1;
    end else begin
        output_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_54_ce0 = 1'b1;
    end else begin
        output_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_55_ce0 = 1'b1;
    end else begin
        output_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_56_ce0 = 1'b1;
    end else begin
        output_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_57_ce0 = 1'b1;
    end else begin
        output_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_58_ce0 = 1'b1;
    end else begin
        output_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_59_ce0 = 1'b1;
    end else begin
        output_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_60_ce0 = 1'b1;
    end else begin
        output_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_61_ce0 = 1'b1;
    end else begin
        output_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_62_ce0 = 1'b1;
    end else begin
        output_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_63_ce0 = 1'b1;
    end else begin
        output_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_64_ce0 = 1'b1;
    end else begin
        output_64_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_65_ce0 = 1'b1;
    end else begin
        output_65_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_66_ce0 = 1'b1;
    end else begin
        output_66_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_67_ce0 = 1'b1;
    end else begin
        output_67_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_68_ce0 = 1'b1;
    end else begin
        output_68_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_69_ce0 = 1'b1;
    end else begin
        output_69_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_70_ce0 = 1'b1;
    end else begin
        output_70_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_71_ce0 = 1'b1;
    end else begin
        output_71_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_72_ce0 = 1'b1;
    end else begin
        output_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_73_ce0 = 1'b1;
    end else begin
        output_73_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_74_ce0 = 1'b1;
    end else begin
        output_74_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_75_ce0 = 1'b1;
    end else begin
        output_75_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_76_ce0 = 1'b1;
    end else begin
        output_76_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_77_ce0 = 1'b1;
    end else begin
        output_77_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_78_ce0 = 1'b1;
    end else begin
        output_78_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_79_ce0 = 1'b1;
    end else begin
        output_79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_80_ce0 = 1'b1;
    end else begin
        output_80_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_81_ce0 = 1'b1;
    end else begin
        output_81_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_82_ce0 = 1'b1;
    end else begin
        output_82_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_83_ce0 = 1'b1;
    end else begin
        output_83_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_84_ce0 = 1'b1;
    end else begin
        output_84_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_8_ce0 = 1'b1;
    end else begin
        output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_9_ce0 = 1'b1;
    end else begin
        output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = write_output_data_fu_2760_p173;

assign M_AXIS_TKEEP = 'bx;

assign M_AXIS_TLAST = (icmp_ln59_fu_3112_p2 & cmp103_reg_4093_pp0_iter1_reg);

assign M_AXIS_TSTRB = 'bx;

assign add_ln56_1_fu_1942_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln56_fu_1910_p2 = (ap_sig_allocacmp_indvar_flatten183_load + 13'd1);

assign add_ln57_fu_2051_p2 = (select_ln56_fu_1934_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln56_reg_3654_pp0_iter1_reg == 1'd0) & (1'b0 == M_AXIS_TREADY));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln56_reg_3654_pp0_iter1_reg == 1'd0) & (1'b0 == M_AXIS_TREADY));
end

always @ (*) begin
    ap_condition_2189 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln56_reg_3654 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cmp103_fu_2045_p2 = ((select_ln56_1_fu_1948_p3 == 7'd84) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_1904_p2 = ((ap_sig_allocacmp_indvar_flatten183_load == 13'd7225) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_1922_p2 = ((ap_sig_allocacmp_j_load == 7'd85) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_3112_p2 = ((select_ln56_reg_3662_pp0_iter1_reg == 7'd84) ? 1'b1 : 1'b0);

assign or_ln56_fu_1928_p2 = (icmp_ln57_fu_1922_p2 | ap_phi_mux_first_iter_2_phi_fu_1878_p4);

assign output_10_address0 = zext_ln56_fu_1956_p1;

assign output_11_address0 = zext_ln56_fu_1956_p1;

assign output_12_address0 = zext_ln56_fu_1956_p1;

assign output_13_address0 = zext_ln56_fu_1956_p1;

assign output_14_address0 = zext_ln56_fu_1956_p1;

assign output_15_address0 = zext_ln56_fu_1956_p1;

assign output_16_address0 = zext_ln56_fu_1956_p1;

assign output_17_address0 = zext_ln56_fu_1956_p1;

assign output_18_address0 = zext_ln56_fu_1956_p1;

assign output_19_address0 = zext_ln56_fu_1956_p1;

assign output_1_address0 = zext_ln56_fu_1956_p1;

assign output_20_address0 = zext_ln56_fu_1956_p1;

assign output_21_address0 = zext_ln56_fu_1956_p1;

assign output_22_address0 = zext_ln56_fu_1956_p1;

assign output_23_address0 = zext_ln56_fu_1956_p1;

assign output_24_address0 = zext_ln56_fu_1956_p1;

assign output_25_address0 = zext_ln56_fu_1956_p1;

assign output_26_address0 = zext_ln56_fu_1956_p1;

assign output_27_address0 = zext_ln56_fu_1956_p1;

assign output_28_address0 = zext_ln56_fu_1956_p1;

assign output_29_address0 = zext_ln56_fu_1956_p1;

assign output_2_address0 = zext_ln56_fu_1956_p1;

assign output_30_address0 = zext_ln56_fu_1956_p1;

assign output_31_address0 = zext_ln56_fu_1956_p1;

assign output_32_address0 = zext_ln56_fu_1956_p1;

assign output_33_address0 = zext_ln56_fu_1956_p1;

assign output_34_address0 = zext_ln56_fu_1956_p1;

assign output_35_address0 = zext_ln56_fu_1956_p1;

assign output_36_address0 = zext_ln56_fu_1956_p1;

assign output_37_address0 = zext_ln56_fu_1956_p1;

assign output_38_address0 = zext_ln56_fu_1956_p1;

assign output_39_address0 = zext_ln56_fu_1956_p1;

assign output_3_address0 = zext_ln56_fu_1956_p1;

assign output_40_address0 = zext_ln56_fu_1956_p1;

assign output_41_address0 = zext_ln56_fu_1956_p1;

assign output_42_address0 = zext_ln56_fu_1956_p1;

assign output_43_address0 = zext_ln56_fu_1956_p1;

assign output_44_address0 = zext_ln56_fu_1956_p1;

assign output_45_address0 = zext_ln56_fu_1956_p1;

assign output_46_address0 = zext_ln56_fu_1956_p1;

assign output_47_address0 = zext_ln56_fu_1956_p1;

assign output_48_address0 = zext_ln56_fu_1956_p1;

assign output_49_address0 = zext_ln56_fu_1956_p1;

assign output_4_address0 = zext_ln56_fu_1956_p1;

assign output_50_address0 = zext_ln56_fu_1956_p1;

assign output_51_address0 = zext_ln56_fu_1956_p1;

assign output_52_address0 = zext_ln56_fu_1956_p1;

assign output_53_address0 = zext_ln56_fu_1956_p1;

assign output_54_address0 = zext_ln56_fu_1956_p1;

assign output_55_address0 = zext_ln56_fu_1956_p1;

assign output_56_address0 = zext_ln56_fu_1956_p1;

assign output_57_address0 = zext_ln56_fu_1956_p1;

assign output_58_address0 = zext_ln56_fu_1956_p1;

assign output_59_address0 = zext_ln56_fu_1956_p1;

assign output_5_address0 = zext_ln56_fu_1956_p1;

assign output_60_address0 = zext_ln56_fu_1956_p1;

assign output_61_address0 = zext_ln56_fu_1956_p1;

assign output_62_address0 = zext_ln56_fu_1956_p1;

assign output_63_address0 = zext_ln56_fu_1956_p1;

assign output_64_address0 = zext_ln56_fu_1956_p1;

assign output_65_address0 = zext_ln56_fu_1956_p1;

assign output_66_address0 = zext_ln56_fu_1956_p1;

assign output_67_address0 = zext_ln56_fu_1956_p1;

assign output_68_address0 = zext_ln56_fu_1956_p1;

assign output_69_address0 = zext_ln56_fu_1956_p1;

assign output_6_address0 = zext_ln56_fu_1956_p1;

assign output_70_address0 = zext_ln56_fu_1956_p1;

assign output_71_address0 = zext_ln56_fu_1956_p1;

assign output_72_address0 = zext_ln56_fu_1956_p1;

assign output_73_address0 = zext_ln56_fu_1956_p1;

assign output_74_address0 = zext_ln56_fu_1956_p1;

assign output_75_address0 = zext_ln56_fu_1956_p1;

assign output_76_address0 = zext_ln56_fu_1956_p1;

assign output_77_address0 = zext_ln56_fu_1956_p1;

assign output_78_address0 = zext_ln56_fu_1956_p1;

assign output_79_address0 = zext_ln56_fu_1956_p1;

assign output_7_address0 = zext_ln56_fu_1956_p1;

assign output_80_address0 = zext_ln56_fu_1956_p1;

assign output_81_address0 = zext_ln56_fu_1956_p1;

assign output_82_address0 = zext_ln56_fu_1956_p1;

assign output_83_address0 = zext_ln56_fu_1956_p1;

assign output_84_address0 = zext_ln56_fu_1956_p1;

assign output_8_address0 = zext_ln56_fu_1956_p1;

assign output_9_address0 = zext_ln56_fu_1956_p1;

assign output_r_address0 = zext_ln56_fu_1956_p1;

assign select_ln56_1_fu_1948_p3 = ((icmp_ln57_fu_1922_p2[0:0] == 1'b1) ? add_ln56_1_fu_1942_p2 : ap_sig_allocacmp_i_load);

assign select_ln56_fu_1934_p3 = ((icmp_ln57_fu_1922_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_load);

assign write_output_data_fu_2760_p170 = output_84_load1_fu_412;

assign write_output_data_fu_2760_p171 = 'bx;

assign write_output_data_fu_2760_p2 = output_load169_fu_748;

assign zext_ln56_fu_1956_p1 = select_ln56_1_fu_1948_p3;

endmodule //sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_56_7_VITIS_LOOP_57_8
