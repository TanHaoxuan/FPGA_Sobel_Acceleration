// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_55_7_VITIS_LOOP_56_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_AXIS_TREADY,
        output_r_address0,
        output_r_ce0,
        output_r_q0,
        output_1_address0,
        output_1_ce0,
        output_1_q0,
        output_2_address0,
        output_2_ce0,
        output_2_q0,
        output_3_address0,
        output_3_ce0,
        output_3_q0,
        output_4_address0,
        output_4_ce0,
        output_4_q0,
        output_5_address0,
        output_5_ce0,
        output_5_q0,
        output_6_address0,
        output_6_ce0,
        output_6_q0,
        output_7_address0,
        output_7_ce0,
        output_7_q0,
        output_8_address0,
        output_8_ce0,
        output_8_q0,
        output_9_address0,
        output_9_ce0,
        output_9_q0,
        output_10_address0,
        output_10_ce0,
        output_10_q0,
        output_11_address0,
        output_11_ce0,
        output_11_q0,
        output_12_address0,
        output_12_ce0,
        output_12_q0,
        output_13_address0,
        output_13_ce0,
        output_13_q0,
        output_14_address0,
        output_14_ce0,
        output_14_q0,
        output_15_address0,
        output_15_ce0,
        output_15_q0,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TKEEP,
        M_AXIS_TSTRB,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   M_AXIS_TREADY;
output  [11:0] output_r_address0;
output   output_r_ce0;
input  [7:0] output_r_q0;
output  [11:0] output_1_address0;
output   output_1_ce0;
input  [7:0] output_1_q0;
output  [11:0] output_2_address0;
output   output_2_ce0;
input  [7:0] output_2_q0;
output  [11:0] output_3_address0;
output   output_3_ce0;
input  [7:0] output_3_q0;
output  [11:0] output_4_address0;
output   output_4_ce0;
input  [7:0] output_4_q0;
output  [11:0] output_5_address0;
output   output_5_ce0;
input  [7:0] output_5_q0;
output  [11:0] output_6_address0;
output   output_6_ce0;
input  [7:0] output_6_q0;
output  [11:0] output_7_address0;
output   output_7_ce0;
input  [7:0] output_7_q0;
output  [11:0] output_8_address0;
output   output_8_ce0;
input  [7:0] output_8_q0;
output  [11:0] output_9_address0;
output   output_9_ce0;
input  [7:0] output_9_q0;
output  [11:0] output_10_address0;
output   output_10_ce0;
input  [7:0] output_10_q0;
output  [11:0] output_11_address0;
output   output_11_ce0;
input  [7:0] output_11_q0;
output  [11:0] output_12_address0;
output   output_12_ce0;
input  [7:0] output_12_q0;
output  [11:0] output_13_address0;
output   output_13_ce0;
input  [7:0] output_13_q0;
output  [11:0] output_14_address0;
output   output_14_ce0;
input  [7:0] output_14_q0;
output  [11:0] output_15_address0;
output   output_15_ce0;
input  [7:0] output_15_q0;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
output  [3:0] M_AXIS_TKEEP;
output  [3:0] M_AXIS_TSTRB;
output  [0:0] M_AXIS_TLAST;

reg ap_idle;
reg output_r_ce0;
reg output_1_ce0;
reg output_2_ce0;
reg output_3_ce0;
reg output_4_ce0;
reg output_5_ce0;
reg output_6_ce0;
reg output_7_ce0;
reg output_8_ce0;
reg output_9_ce0;
reg output_10_ce0;
reg output_11_ce0;
reg output_12_ce0;
reg output_13_ce0;
reg output_14_ce0;
reg output_15_ce0;
reg M_AXIS_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_390_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    M_AXIS_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] trunc_ln7_reg_701;
wire   [0:0] write_output_last_fu_494_p2;
reg   [0:0] write_output_last_reg_706;
wire   [63:0] zext_ln57_fu_458_p1;
reg   [8:0] j_fu_134;
wire   [8:0] add_ln56_fu_500_p2;
wire    ap_loop_init;
reg   [8:0] i_fu_138;
wire   [8:0] select_ln55_1_fu_428_p3;
reg   [16:0] indvar_flatten13_fu_142;
wire   [16:0] add_ln55_1_fu_396_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln56_fu_414_p2;
wire   [8:0] add_ln55_fu_408_p2;
wire   [8:0] select_ln55_fu_420_p3;
wire   [7:0] empty_fu_436_p1;
wire   [3:0] trunc_ln56_fu_446_p1;
wire   [11:0] tmp_s_fu_450_p3;
wire   [0:0] cmp94_fu_440_p2;
wire   [0:0] icmp_ln58_fu_488_p2;
wire   [7:0] write_output_data_fu_521_p33;
wire   [7:0] write_output_data_fu_521_p35;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [3:0] write_output_data_fu_521_p1;
wire   [3:0] write_output_data_fu_521_p3;
wire   [3:0] write_output_data_fu_521_p5;
wire   [3:0] write_output_data_fu_521_p7;
wire   [3:0] write_output_data_fu_521_p9;
wire   [3:0] write_output_data_fu_521_p11;
wire   [3:0] write_output_data_fu_521_p13;
wire   [3:0] write_output_data_fu_521_p15;
wire  signed [3:0] write_output_data_fu_521_p17;
wire  signed [3:0] write_output_data_fu_521_p19;
wire  signed [3:0] write_output_data_fu_521_p21;
wire  signed [3:0] write_output_data_fu_521_p23;
wire  signed [3:0] write_output_data_fu_521_p25;
wire  signed [3:0] write_output_data_fu_521_p27;
wire  signed [3:0] write_output_data_fu_521_p29;
wire  signed [3:0] write_output_data_fu_521_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_134 = 9'd0;
#0 i_fu_138 = 9'd0;
#0 indvar_flatten13_fu_142 = 17'd0;
#0 ap_done_reg = 1'b0;
end

sobel_hls_sparsemux_33_4_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
sparsemux_33_4_8_1_1_U267(
    .din0(output_r_q0),
    .din1(output_1_q0),
    .din2(output_2_q0),
    .din3(output_3_q0),
    .din4(output_4_q0),
    .din5(output_5_q0),
    .din6(output_6_q0),
    .din7(output_7_q0),
    .din8(output_8_q0),
    .din9(output_9_q0),
    .din10(output_10_q0),
    .din11(output_11_q0),
    .din12(output_12_q0),
    .din13(output_13_q0),
    .din14(output_14_q0),
    .din15(output_15_q0),
    .def(write_output_data_fu_521_p33),
    .sel(trunc_ln7_reg_701),
    .dout(write_output_data_fu_521_p35)
);

sobel_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_138 <= 9'd0;
        end else if (((icmp_ln55_fu_390_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_138 <= select_ln55_1_fu_428_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_142 <= 17'd0;
        end else if (((icmp_ln55_fu_390_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten13_fu_142 <= add_ln55_1_fu_396_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_134 <= 9'd0;
        end else if (((icmp_ln55_fu_390_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_134 <= add_ln56_fu_500_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln7_reg_701 <= {{select_ln55_fu_420_p3[7:4]}};
        write_output_last_reg_706 <= write_output_last_fu_494_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        M_AXIS_TVALID = 1'b1;
    end else begin
        M_AXIS_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_390_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_10_ce0 = 1'b1;
    end else begin
        output_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_11_ce0 = 1'b1;
    end else begin
        output_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_12_ce0 = 1'b1;
    end else begin
        output_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_13_ce0 = 1'b1;
    end else begin
        output_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_14_ce0 = 1'b1;
    end else begin
        output_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_15_ce0 = 1'b1;
    end else begin
        output_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_8_ce0 = 1'b1;
    end else begin
        output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_9_ce0 = 1'b1;
    end else begin
        output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = write_output_data_fu_521_p35;

assign M_AXIS_TKEEP = 'bx;

assign M_AXIS_TLAST = write_output_last_reg_706;

assign M_AXIS_TSTRB = 'bx;

assign add_ln55_1_fu_396_p2 = (indvar_flatten13_fu_142 + 17'd1);

assign add_ln55_fu_408_p2 = (i_fu_138 + 9'd1);

assign add_ln56_fu_500_p2 = (select_ln55_fu_420_p3 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b0 == M_AXIS_TREADY) | (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b0 == M_AXIS_TREADY) | (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (1'b0 == M_AXIS_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign cmp94_fu_440_p2 = ((select_ln55_1_fu_428_p3 == 9'd255) ? 1'b1 : 1'b0);

assign empty_fu_436_p1 = select_ln55_1_fu_428_p3[7:0];

assign icmp_ln55_fu_390_p2 = ((indvar_flatten13_fu_142 == 17'd65536) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_414_p2 = ((j_fu_134 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_488_p2 = ((select_ln55_fu_420_p3 == 9'd255) ? 1'b1 : 1'b0);

assign output_10_address0 = zext_ln57_fu_458_p1;

assign output_11_address0 = zext_ln57_fu_458_p1;

assign output_12_address0 = zext_ln57_fu_458_p1;

assign output_13_address0 = zext_ln57_fu_458_p1;

assign output_14_address0 = zext_ln57_fu_458_p1;

assign output_15_address0 = zext_ln57_fu_458_p1;

assign output_1_address0 = zext_ln57_fu_458_p1;

assign output_2_address0 = zext_ln57_fu_458_p1;

assign output_3_address0 = zext_ln57_fu_458_p1;

assign output_4_address0 = zext_ln57_fu_458_p1;

assign output_5_address0 = zext_ln57_fu_458_p1;

assign output_6_address0 = zext_ln57_fu_458_p1;

assign output_7_address0 = zext_ln57_fu_458_p1;

assign output_8_address0 = zext_ln57_fu_458_p1;

assign output_9_address0 = zext_ln57_fu_458_p1;

assign output_r_address0 = zext_ln57_fu_458_p1;

assign select_ln55_1_fu_428_p3 = ((icmp_ln56_fu_414_p2[0:0] == 1'b1) ? add_ln55_fu_408_p2 : i_fu_138);

assign select_ln55_fu_420_p3 = ((icmp_ln56_fu_414_p2[0:0] == 1'b1) ? 9'd0 : j_fu_134);

assign tmp_s_fu_450_p3 = {{empty_fu_436_p1}, {trunc_ln56_fu_446_p1}};

assign trunc_ln56_fu_446_p1 = select_ln55_fu_420_p3[3:0];

assign write_output_data_fu_521_p33 = 'bx;

assign write_output_last_fu_494_p2 = (icmp_ln58_fu_488_p2 & cmp94_fu_440_p2);

assign zext_ln57_fu_458_p1 = tmp_s_fu_450_p3;

endmodule //sobel_hls_sobel_hls_Pipeline_VITIS_LOOP_55_7_VITIS_LOOP_56_8
