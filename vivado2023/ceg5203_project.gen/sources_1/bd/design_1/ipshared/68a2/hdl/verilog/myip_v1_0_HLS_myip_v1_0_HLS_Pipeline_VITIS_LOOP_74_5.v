// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myip_v1_0_HLS_myip_v1_0_HLS_Pipeline_VITIS_LOOP_74_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RES_0_address0,
        RES_0_ce0,
        RES_0_we0,
        RES_0_d0,
        A_address0,
        A_ce0,
        A_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0,
        A_4_address0,
        A_4_ce0,
        A_4_q0,
        A_5_address0,
        A_5_ce0,
        A_5_q0,
        A_6_address0,
        A_6_ce0,
        A_6_q0,
        A_7_address0,
        A_7_ce0,
        A_7_q0,
        B_reload,
        B_1_reload,
        B_2_reload,
        B_3_reload,
        B_4_reload,
        B_5_reload,
        B_6_reload,
        B_7_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] RES_0_address0;
output   RES_0_ce0;
output   RES_0_we0;
output  [27:0] RES_0_d0;
output  [5:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [5:0] A_1_address0;
output   A_1_ce0;
input  [31:0] A_1_q0;
output  [5:0] A_2_address0;
output   A_2_ce0;
input  [31:0] A_2_q0;
output  [5:0] A_3_address0;
output   A_3_ce0;
input  [31:0] A_3_q0;
output  [5:0] A_4_address0;
output   A_4_ce0;
input  [31:0] A_4_q0;
output  [5:0] A_5_address0;
output   A_5_ce0;
input  [31:0] A_5_q0;
output  [5:0] A_6_address0;
output   A_6_ce0;
input  [31:0] A_6_q0;
output  [5:0] A_7_address0;
output   A_7_ce0;
input  [31:0] A_7_q0;
input  [31:0] B_reload;
input  [31:0] B_1_reload;
input  [31:0] B_2_reload;
input  [31:0] B_3_reload;
input  [31:0] B_4_reload;
input  [31:0] B_5_reload;
input  [31:0] B_6_reload;
input  [31:0] B_7_reload;

reg ap_idle;
reg RES_0_ce0;
reg RES_0_we0;
reg A_ce0;
reg A_1_ce0;
reg A_2_ce0;
reg A_3_ce0;
reg A_4_ce0;
reg A_5_ce0;
reg A_6_ce0;
reg A_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln74_fu_289_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln74_fu_301_p1;
reg   [63:0] zext_ln74_reg_892;
reg   [63:0] zext_ln74_reg_892_pp0_iter1_reg;
wire   [31:0] mul_ln78_fu_241_p2;
reg   [31:0] mul_ln78_reg_937;
wire   [31:0] mul_ln78_1_fu_246_p2;
reg   [31:0] mul_ln78_1_reg_944;
wire   [31:0] mul_ln78_2_fu_251_p2;
reg   [31:0] mul_ln78_2_reg_951;
wire   [31:0] mul_ln78_3_fu_256_p2;
reg   [31:0] mul_ln78_3_reg_958;
wire   [31:0] mul_ln78_4_fu_261_p2;
reg   [31:0] mul_ln78_4_reg_965;
wire   [31:0] mul_ln78_5_fu_266_p2;
reg   [31:0] mul_ln78_5_reg_972;
wire   [31:0] mul_ln78_6_fu_271_p2;
reg   [31:0] mul_ln78_6_reg_979;
wire   [31:0] mul_ln78_7_fu_276_p2;
reg   [31:0] mul_ln78_7_reg_986;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_72;
wire   [6:0] add_ln74_fu_295_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_2;
wire   [31:0] sub_ln78_fu_325_p2;
wire   [23:0] tmp_fu_330_p4;
wire   [24:0] zext_ln78_fu_340_p1;
wire   [23:0] tmp_1_fu_350_p4;
wire   [0:0] tmp_16_fu_318_p3;
wire   [24:0] sub_ln78_1_fu_344_p2;
wire   [24:0] zext_ln78_1_fu_359_p1;
wire   [24:0] select_ln78_fu_363_p3;
wire   [31:0] sub_ln78_2_fu_382_p2;
wire   [23:0] tmp_2_fu_387_p4;
wire   [24:0] zext_ln78_2_fu_397_p1;
wire   [23:0] tmp_3_fu_407_p4;
wire   [0:0] tmp_17_fu_375_p3;
wire   [24:0] sub_ln78_3_fu_401_p2;
wire   [24:0] zext_ln78_3_fu_416_p1;
wire   [24:0] select_ln78_1_fu_420_p3;
wire   [31:0] sub_ln78_4_fu_439_p2;
wire   [23:0] tmp_4_fu_444_p4;
wire   [24:0] zext_ln78_4_fu_454_p1;
wire   [23:0] tmp_5_fu_464_p4;
wire   [0:0] tmp_18_fu_432_p3;
wire   [24:0] sub_ln78_5_fu_458_p2;
wire   [24:0] zext_ln78_5_fu_473_p1;
wire   [24:0] select_ln78_2_fu_477_p3;
wire   [31:0] sub_ln78_6_fu_496_p2;
wire   [23:0] tmp_6_fu_501_p4;
wire   [24:0] zext_ln78_6_fu_511_p1;
wire   [23:0] tmp_7_fu_521_p4;
wire   [0:0] tmp_19_fu_489_p3;
wire   [24:0] sub_ln78_7_fu_515_p2;
wire   [24:0] zext_ln78_7_fu_530_p1;
wire   [24:0] select_ln78_3_fu_534_p3;
wire   [31:0] sub_ln78_8_fu_553_p2;
wire   [23:0] tmp_8_fu_558_p4;
wire   [24:0] zext_ln78_8_fu_568_p1;
wire   [23:0] tmp_9_fu_578_p4;
wire   [0:0] tmp_20_fu_546_p3;
wire   [24:0] sub_ln78_9_fu_572_p2;
wire   [24:0] zext_ln78_9_fu_587_p1;
wire   [24:0] select_ln78_4_fu_591_p3;
wire   [31:0] sub_ln78_10_fu_610_p2;
wire   [23:0] tmp_s_fu_615_p4;
wire   [24:0] zext_ln78_10_fu_625_p1;
wire   [23:0] tmp_10_fu_635_p4;
wire   [0:0] tmp_21_fu_603_p3;
wire   [24:0] sub_ln78_11_fu_629_p2;
wire   [24:0] zext_ln78_11_fu_644_p1;
wire   [24:0] select_ln78_5_fu_648_p3;
wire   [31:0] sub_ln78_12_fu_667_p2;
wire   [23:0] tmp_11_fu_672_p4;
wire   [24:0] zext_ln78_12_fu_682_p1;
wire   [23:0] tmp_12_fu_692_p4;
wire   [0:0] tmp_22_fu_660_p3;
wire   [24:0] sub_ln78_13_fu_686_p2;
wire   [24:0] zext_ln78_13_fu_701_p1;
wire   [24:0] select_ln78_6_fu_705_p3;
wire   [31:0] sub_ln78_14_fu_724_p2;
wire   [23:0] tmp_13_fu_729_p4;
wire   [24:0] zext_ln78_14_fu_739_p1;
wire   [23:0] tmp_14_fu_749_p4;
wire   [0:0] tmp_23_fu_717_p3;
wire   [24:0] sub_ln78_15_fu_743_p2;
wire   [24:0] zext_ln78_15_fu_758_p1;
wire   [24:0] select_ln78_7_fu_762_p3;
wire  signed [25:0] sext_ln78_1_fu_428_p1;
wire  signed [25:0] sext_ln78_fu_371_p1;
wire   [25:0] add_ln78_fu_774_p2;
wire  signed [25:0] sext_ln78_2_fu_485_p1;
wire  signed [25:0] sext_ln78_3_fu_542_p1;
wire   [25:0] add_ln78_1_fu_784_p2;
wire  signed [26:0] sext_ln78_9_fu_790_p1;
wire  signed [26:0] sext_ln78_8_fu_780_p1;
wire   [26:0] add_ln78_2_fu_794_p2;
wire  signed [25:0] sext_ln78_4_fu_599_p1;
wire  signed [25:0] sext_ln78_5_fu_656_p1;
wire   [25:0] add_ln78_3_fu_804_p2;
wire  signed [25:0] sext_ln78_6_fu_713_p1;
wire  signed [25:0] sext_ln78_7_fu_770_p1;
wire   [25:0] add_ln78_4_fu_814_p2;
wire  signed [26:0] sext_ln78_12_fu_820_p1;
wire  signed [26:0] sext_ln78_11_fu_810_p1;
wire   [26:0] add_ln78_5_fu_824_p2;
wire  signed [27:0] sext_ln78_13_fu_830_p1;
wire  signed [27:0] sext_ln78_10_fu_800_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_72 = 7'd0;
#0 ap_done_reg = 1'b0;
end

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U26(
    .din0(A_q0),
    .din1(B_reload),
    .dout(mul_ln78_fu_241_p2)
);

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U27(
    .din0(A_1_q0),
    .din1(B_1_reload),
    .dout(mul_ln78_1_fu_246_p2)
);

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U28(
    .din0(A_2_q0),
    .din1(B_2_reload),
    .dout(mul_ln78_2_fu_251_p2)
);

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U29(
    .din0(A_3_q0),
    .din1(B_3_reload),
    .dout(mul_ln78_3_fu_256_p2)
);

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U30(
    .din0(A_4_q0),
    .din1(B_4_reload),
    .dout(mul_ln78_4_fu_261_p2)
);

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U31(
    .din0(A_5_q0),
    .din1(B_5_reload),
    .dout(mul_ln78_5_fu_266_p2)
);

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(A_6_q0),
    .din1(B_6_reload),
    .dout(mul_ln78_6_fu_271_p2)
);

myip_v1_0_HLS_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(A_7_q0),
    .din1(B_7_reload),
    .dout(mul_ln78_7_fu_276_p2)
);

myip_v1_0_HLS_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln74_fu_289_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_72 <= add_ln74_fu_295_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        mul_ln78_1_reg_944 <= mul_ln78_1_fu_246_p2;
        mul_ln78_2_reg_951 <= mul_ln78_2_fu_251_p2;
        mul_ln78_3_reg_958 <= mul_ln78_3_fu_256_p2;
        mul_ln78_4_reg_965 <= mul_ln78_4_fu_261_p2;
        mul_ln78_5_reg_972 <= mul_ln78_5_fu_266_p2;
        mul_ln78_6_reg_979 <= mul_ln78_6_fu_271_p2;
        mul_ln78_7_reg_986 <= mul_ln78_7_fu_276_p2;
        mul_ln78_reg_937 <= mul_ln78_fu_241_p2;
        zext_ln74_reg_892[6 : 0] <= zext_ln74_fu_301_p1[6 : 0];
        zext_ln74_reg_892_pp0_iter1_reg[6 : 0] <= zext_ln74_reg_892[6 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_ce0 = 1'b1;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_ce0 = 1'b1;
    end else begin
        A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_4_ce0 = 1'b1;
    end else begin
        A_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_5_ce0 = 1'b1;
    end else begin
        A_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_6_ce0 = 1'b1;
    end else begin
        A_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_7_ce0 = 1'b1;
    end else begin
        A_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        RES_0_ce0 = 1'b1;
    end else begin
        RES_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        RES_0_we0 = 1'b1;
    end else begin
        RES_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_289_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_72;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_1_address0 = zext_ln74_fu_301_p1;

assign A_2_address0 = zext_ln74_fu_301_p1;

assign A_3_address0 = zext_ln74_fu_301_p1;

assign A_4_address0 = zext_ln74_fu_301_p1;

assign A_5_address0 = zext_ln74_fu_301_p1;

assign A_6_address0 = zext_ln74_fu_301_p1;

assign A_7_address0 = zext_ln74_fu_301_p1;

assign A_address0 = zext_ln74_fu_301_p1;

assign RES_0_address0 = zext_ln74_reg_892_pp0_iter1_reg;

assign RES_0_d0 = ($signed(sext_ln78_13_fu_830_p1) + $signed(sext_ln78_10_fu_800_p1));

assign add_ln74_fu_295_p2 = (ap_sig_allocacmp_i_2 + 7'd1);

assign add_ln78_1_fu_784_p2 = ($signed(sext_ln78_2_fu_485_p1) + $signed(sext_ln78_3_fu_542_p1));

assign add_ln78_2_fu_794_p2 = ($signed(sext_ln78_9_fu_790_p1) + $signed(sext_ln78_8_fu_780_p1));

assign add_ln78_3_fu_804_p2 = ($signed(sext_ln78_4_fu_599_p1) + $signed(sext_ln78_5_fu_656_p1));

assign add_ln78_4_fu_814_p2 = ($signed(sext_ln78_6_fu_713_p1) + $signed(sext_ln78_7_fu_770_p1));

assign add_ln78_5_fu_824_p2 = ($signed(sext_ln78_12_fu_820_p1) + $signed(sext_ln78_11_fu_810_p1));

assign add_ln78_fu_774_p2 = ($signed(sext_ln78_1_fu_428_p1) + $signed(sext_ln78_fu_371_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln74_fu_289_p2 = ((ap_sig_allocacmp_i_2 == 7'd64) ? 1'b1 : 1'b0);

assign select_ln78_1_fu_420_p3 = ((tmp_17_fu_375_p3[0:0] == 1'b1) ? sub_ln78_3_fu_401_p2 : zext_ln78_3_fu_416_p1);

assign select_ln78_2_fu_477_p3 = ((tmp_18_fu_432_p3[0:0] == 1'b1) ? sub_ln78_5_fu_458_p2 : zext_ln78_5_fu_473_p1);

assign select_ln78_3_fu_534_p3 = ((tmp_19_fu_489_p3[0:0] == 1'b1) ? sub_ln78_7_fu_515_p2 : zext_ln78_7_fu_530_p1);

assign select_ln78_4_fu_591_p3 = ((tmp_20_fu_546_p3[0:0] == 1'b1) ? sub_ln78_9_fu_572_p2 : zext_ln78_9_fu_587_p1);

assign select_ln78_5_fu_648_p3 = ((tmp_21_fu_603_p3[0:0] == 1'b1) ? sub_ln78_11_fu_629_p2 : zext_ln78_11_fu_644_p1);

assign select_ln78_6_fu_705_p3 = ((tmp_22_fu_660_p3[0:0] == 1'b1) ? sub_ln78_13_fu_686_p2 : zext_ln78_13_fu_701_p1);

assign select_ln78_7_fu_762_p3 = ((tmp_23_fu_717_p3[0:0] == 1'b1) ? sub_ln78_15_fu_743_p2 : zext_ln78_15_fu_758_p1);

assign select_ln78_fu_363_p3 = ((tmp_16_fu_318_p3[0:0] == 1'b1) ? sub_ln78_1_fu_344_p2 : zext_ln78_1_fu_359_p1);

assign sext_ln78_10_fu_800_p1 = $signed(add_ln78_2_fu_794_p2);

assign sext_ln78_11_fu_810_p1 = $signed(add_ln78_3_fu_804_p2);

assign sext_ln78_12_fu_820_p1 = $signed(add_ln78_4_fu_814_p2);

assign sext_ln78_13_fu_830_p1 = $signed(add_ln78_5_fu_824_p2);

assign sext_ln78_1_fu_428_p1 = $signed(select_ln78_1_fu_420_p3);

assign sext_ln78_2_fu_485_p1 = $signed(select_ln78_2_fu_477_p3);

assign sext_ln78_3_fu_542_p1 = $signed(select_ln78_3_fu_534_p3);

assign sext_ln78_4_fu_599_p1 = $signed(select_ln78_4_fu_591_p3);

assign sext_ln78_5_fu_656_p1 = $signed(select_ln78_5_fu_648_p3);

assign sext_ln78_6_fu_713_p1 = $signed(select_ln78_6_fu_705_p3);

assign sext_ln78_7_fu_770_p1 = $signed(select_ln78_7_fu_762_p3);

assign sext_ln78_8_fu_780_p1 = $signed(add_ln78_fu_774_p2);

assign sext_ln78_9_fu_790_p1 = $signed(add_ln78_1_fu_784_p2);

assign sext_ln78_fu_371_p1 = $signed(select_ln78_fu_363_p3);

assign sub_ln78_10_fu_610_p2 = (32'd0 - mul_ln78_5_reg_972);

assign sub_ln78_11_fu_629_p2 = (25'd0 - zext_ln78_10_fu_625_p1);

assign sub_ln78_12_fu_667_p2 = (32'd0 - mul_ln78_6_reg_979);

assign sub_ln78_13_fu_686_p2 = (25'd0 - zext_ln78_12_fu_682_p1);

assign sub_ln78_14_fu_724_p2 = (32'd0 - mul_ln78_7_reg_986);

assign sub_ln78_15_fu_743_p2 = (25'd0 - zext_ln78_14_fu_739_p1);

assign sub_ln78_1_fu_344_p2 = (25'd0 - zext_ln78_fu_340_p1);

assign sub_ln78_2_fu_382_p2 = (32'd0 - mul_ln78_1_reg_944);

assign sub_ln78_3_fu_401_p2 = (25'd0 - zext_ln78_2_fu_397_p1);

assign sub_ln78_4_fu_439_p2 = (32'd0 - mul_ln78_2_reg_951);

assign sub_ln78_5_fu_458_p2 = (25'd0 - zext_ln78_4_fu_454_p1);

assign sub_ln78_6_fu_496_p2 = (32'd0 - mul_ln78_3_reg_958);

assign sub_ln78_7_fu_515_p2 = (25'd0 - zext_ln78_6_fu_511_p1);

assign sub_ln78_8_fu_553_p2 = (32'd0 - mul_ln78_4_reg_965);

assign sub_ln78_9_fu_572_p2 = (25'd0 - zext_ln78_8_fu_568_p1);

assign sub_ln78_fu_325_p2 = (32'd0 - mul_ln78_reg_937);

assign tmp_10_fu_635_p4 = {{mul_ln78_5_reg_972[31:8]}};

assign tmp_11_fu_672_p4 = {{sub_ln78_12_fu_667_p2[31:8]}};

assign tmp_12_fu_692_p4 = {{mul_ln78_6_reg_979[31:8]}};

assign tmp_13_fu_729_p4 = {{sub_ln78_14_fu_724_p2[31:8]}};

assign tmp_14_fu_749_p4 = {{mul_ln78_7_reg_986[31:8]}};

assign tmp_16_fu_318_p3 = mul_ln78_reg_937[32'd31];

assign tmp_17_fu_375_p3 = mul_ln78_1_reg_944[32'd31];

assign tmp_18_fu_432_p3 = mul_ln78_2_reg_951[32'd31];

assign tmp_19_fu_489_p3 = mul_ln78_3_reg_958[32'd31];

assign tmp_1_fu_350_p4 = {{mul_ln78_reg_937[31:8]}};

assign tmp_20_fu_546_p3 = mul_ln78_4_reg_965[32'd31];

assign tmp_21_fu_603_p3 = mul_ln78_5_reg_972[32'd31];

assign tmp_22_fu_660_p3 = mul_ln78_6_reg_979[32'd31];

assign tmp_23_fu_717_p3 = mul_ln78_7_reg_986[32'd31];

assign tmp_2_fu_387_p4 = {{sub_ln78_2_fu_382_p2[31:8]}};

assign tmp_3_fu_407_p4 = {{mul_ln78_1_reg_944[31:8]}};

assign tmp_4_fu_444_p4 = {{sub_ln78_4_fu_439_p2[31:8]}};

assign tmp_5_fu_464_p4 = {{mul_ln78_2_reg_951[31:8]}};

assign tmp_6_fu_501_p4 = {{sub_ln78_6_fu_496_p2[31:8]}};

assign tmp_7_fu_521_p4 = {{mul_ln78_3_reg_958[31:8]}};

assign tmp_8_fu_558_p4 = {{sub_ln78_8_fu_553_p2[31:8]}};

assign tmp_9_fu_578_p4 = {{mul_ln78_4_reg_965[31:8]}};

assign tmp_fu_330_p4 = {{sub_ln78_fu_325_p2[31:8]}};

assign tmp_s_fu_615_p4 = {{sub_ln78_10_fu_610_p2[31:8]}};

assign zext_ln74_fu_301_p1 = ap_sig_allocacmp_i_2;

assign zext_ln78_10_fu_625_p1 = tmp_s_fu_615_p4;

assign zext_ln78_11_fu_644_p1 = tmp_10_fu_635_p4;

assign zext_ln78_12_fu_682_p1 = tmp_11_fu_672_p4;

assign zext_ln78_13_fu_701_p1 = tmp_12_fu_692_p4;

assign zext_ln78_14_fu_739_p1 = tmp_13_fu_729_p4;

assign zext_ln78_15_fu_758_p1 = tmp_14_fu_749_p4;

assign zext_ln78_1_fu_359_p1 = tmp_1_fu_350_p4;

assign zext_ln78_2_fu_397_p1 = tmp_2_fu_387_p4;

assign zext_ln78_3_fu_416_p1 = tmp_3_fu_407_p4;

assign zext_ln78_4_fu_454_p1 = tmp_4_fu_444_p4;

assign zext_ln78_5_fu_473_p1 = tmp_5_fu_464_p4;

assign zext_ln78_6_fu_511_p1 = tmp_6_fu_501_p4;

assign zext_ln78_7_fu_530_p1 = tmp_7_fu_521_p4;

assign zext_ln78_8_fu_568_p1 = tmp_8_fu_558_p4;

assign zext_ln78_9_fu_587_p1 = tmp_9_fu_578_p4;

assign zext_ln78_fu_340_p1 = tmp_fu_330_p4;

always @ (posedge ap_clk) begin
    zext_ln74_reg_892[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln74_reg_892_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //myip_v1_0_HLS_myip_v1_0_HLS_Pipeline_VITIS_LOOP_74_5
