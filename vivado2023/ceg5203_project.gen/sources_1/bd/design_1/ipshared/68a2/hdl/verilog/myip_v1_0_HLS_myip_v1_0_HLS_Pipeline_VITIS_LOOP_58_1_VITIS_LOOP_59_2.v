// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myip_v1_0_HLS_myip_v1_0_HLS_Pipeline_VITIS_LOOP_58_1_VITIS_LOOP_59_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        S_AXIS_TVALID,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_1_address0,
        A_1_ce0,
        A_1_we0,
        A_1_d0,
        A_2_address0,
        A_2_ce0,
        A_2_we0,
        A_2_d0,
        A_3_address0,
        A_3_ce0,
        A_3_we0,
        A_3_d0,
        A_4_address0,
        A_4_ce0,
        A_4_we0,
        A_4_d0,
        A_5_address0,
        A_5_ce0,
        A_5_we0,
        A_5_d0,
        A_6_address0,
        A_6_ce0,
        A_6_we0,
        A_6_d0,
        A_7_address0,
        A_7_ce0,
        A_7_we0,
        A_7_d0,
        S_AXIS_TDATA,
        S_AXIS_TREADY,
        S_AXIS_TKEEP,
        S_AXIS_TSTRB,
        S_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   S_AXIS_TVALID;
output  [5:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
output  [5:0] A_1_address0;
output   A_1_ce0;
output   A_1_we0;
output  [31:0] A_1_d0;
output  [5:0] A_2_address0;
output   A_2_ce0;
output   A_2_we0;
output  [31:0] A_2_d0;
output  [5:0] A_3_address0;
output   A_3_ce0;
output   A_3_we0;
output  [31:0] A_3_d0;
output  [5:0] A_4_address0;
output   A_4_ce0;
output   A_4_we0;
output  [31:0] A_4_d0;
output  [5:0] A_5_address0;
output   A_5_ce0;
output   A_5_we0;
output  [31:0] A_5_d0;
output  [5:0] A_6_address0;
output   A_6_ce0;
output   A_6_we0;
output  [31:0] A_6_d0;
output  [5:0] A_7_address0;
output   A_7_ce0;
output   A_7_we0;
output  [31:0] A_7_d0;
input  [31:0] S_AXIS_TDATA;
output   S_AXIS_TREADY;
input  [3:0] S_AXIS_TKEEP;
input  [3:0] S_AXIS_TSTRB;
input  [0:0] S_AXIS_TLAST;

reg ap_idle;
reg A_ce0;
reg A_we0;
reg A_1_ce0;
reg A_1_we0;
reg A_2_ce0;
reg A_2_we0;
reg A_3_ce0;
reg A_3_we0;
reg A_4_ce0;
reg A_4_we0;
reg A_5_ce0;
reg A_5_we0;
reg A_6_ce0;
reg A_6_we0;
reg A_7_ce0;
reg A_7_we0;
reg S_AXIS_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln58_fu_234_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    S_AXIS_TDATA_blk_n;
wire   [63:0] zext_ln58_fu_280_p1;
reg   [3:0] j_fu_88;
wire   [3:0] add_ln59_fu_308_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_92;
wire   [6:0] select_ln58_1_fu_272_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten_fu_96;
wire   [9:0] add_ln58_fu_240_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [2:0] trunc_ln59_fu_292_p1;
wire   [0:0] icmp_ln59_fu_252_p2;
wire   [6:0] add_ln58_1_fu_266_p2;
wire   [3:0] select_ln58_fu_258_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 j_fu_88 = 4'd0;
#0 i_fu_92 = 7'd0;
#0 indvar_flatten_fu_96 = 10'd0;
#0 ap_done_reg = 1'b0;
end

myip_v1_0_HLS_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln58_fu_234_p2 == 1'd0)) begin
            i_fu_92 <= select_ln58_1_fu_272_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln58_fu_234_p2 == 1'd0)) begin
            indvar_flatten_fu_96 <= add_ln58_fu_240_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_96 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln58_fu_234_p2 == 1'd0)) begin
            j_fu_88 <= add_ln59_fu_308_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_88 <= 4'd0;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd1))) begin
        A_1_we0 = 1'b1;
    end else begin
        A_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_2_ce0 = 1'b1;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd2))) begin
        A_2_we0 = 1'b1;
    end else begin
        A_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_3_ce0 = 1'b1;
    end else begin
        A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd3))) begin
        A_3_we0 = 1'b1;
    end else begin
        A_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_4_ce0 = 1'b1;
    end else begin
        A_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd4))) begin
        A_4_we0 = 1'b1;
    end else begin
        A_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_5_ce0 = 1'b1;
    end else begin
        A_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd5))) begin
        A_5_we0 = 1'b1;
    end else begin
        A_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_6_ce0 = 1'b1;
    end else begin
        A_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd6))) begin
        A_6_we0 = 1'b1;
    end else begin
        A_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_7_ce0 = 1'b1;
    end else begin
        A_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd7))) begin
        A_7_we0 = 1'b1;
    end else begin
        A_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln59_fu_292_p1 == 3'd0))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_234_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln58_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_92;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_96;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_88;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_1_address0 = zext_ln58_fu_280_p1;

assign A_1_d0 = S_AXIS_TDATA;

assign A_2_address0 = zext_ln58_fu_280_p1;

assign A_2_d0 = S_AXIS_TDATA;

assign A_3_address0 = zext_ln58_fu_280_p1;

assign A_3_d0 = S_AXIS_TDATA;

assign A_4_address0 = zext_ln58_fu_280_p1;

assign A_4_d0 = S_AXIS_TDATA;

assign A_5_address0 = zext_ln58_fu_280_p1;

assign A_5_d0 = S_AXIS_TDATA;

assign A_6_address0 = zext_ln58_fu_280_p1;

assign A_6_d0 = S_AXIS_TDATA;

assign A_7_address0 = zext_ln58_fu_280_p1;

assign A_7_d0 = S_AXIS_TDATA;

assign A_address0 = zext_ln58_fu_280_p1;

assign A_d0 = S_AXIS_TDATA;

assign add_ln58_1_fu_266_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln58_fu_240_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln59_fu_308_p2 = (select_ln58_fu_258_p3 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_TVALID) & (icmp_ln58_fu_234_p2 == 1'd0)));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln58_fu_234_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_252_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln58_1_fu_272_p3 = ((icmp_ln59_fu_252_p2[0:0] == 1'b1) ? add_ln58_1_fu_266_p2 : ap_sig_allocacmp_i_load);

assign select_ln58_fu_258_p3 = ((icmp_ln59_fu_252_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign trunc_ln59_fu_292_p1 = select_ln58_fu_258_p3[2:0];

assign zext_ln58_fu_280_p1 = select_ln58_1_fu_272_p3;

endmodule //myip_v1_0_HLS_myip_v1_0_HLS_Pipeline_VITIS_LOOP_58_1_VITIS_LOOP_59_2
